{
	"id": 0,
	"name": "intern",
	"kind": 0,
	"flags": {},
	"originalName": "",
	"children": [
		{
			"id": 1,
			"name": "index",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"comment": {
				"shortText": "This is the default public API for Intern. Since most of Intern's public API\nis accessible through the [[lib/executors/Executor.Executor]] classes, this\nmodule simply exports a reference to the global executor instance."
			},
			"children": [
				{
					"id": 2,
					"name": "default",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/index.ts",
							"line": 10,
							"character": 6
						}
					],
					"type": {
						"type": "reference",
						"id": 4,
						"name": "default"
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						2
					]
				}
			],
			"sources": [
				{
					"fileName": "src/index.ts",
					"line": 7,
					"character": 0
				}
			]
		},
		{
			"id": 754,
			"name": "lib/executors/Browser",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 1103,
					"name": "Config",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"sources": [
						{
							"fileName": "src/lib/executors/Browser.ts",
							"line": 159,
							"character": 17
						}
					],
					"target": 1018
				},
				{
					"id": 755,
					"name": "default",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "A Browser executor is used to run unit tests in a browser."
					},
					"children": [
						{
							"id": 756,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Browser.ts",
									"line": 19,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 757,
									"name": "new default",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 758,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 759,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 760,
															"name": "bail",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "By default, Intern will run all configured tests. Setting this option\nto `true` will cause Intern to stop running tests after the first failure."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 18,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 762,
															"name": "basePath",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The path to the project base. This will always end with a path separator\n(e.g., /)."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 26,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 761,
															"name": "baseline",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 20,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 763,
															"name": "benchmark",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "This property must be set to `true` for benchmark tests to run. If it is\nunset or `false`, any suites registered using the benchmark interface will\nbe ignored."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 33,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 764,
															"name": "benchmarkConfig",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 35,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 765,
															"name": "browser",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 37,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 777,
															"name": "capabilities",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The default capabilities for all test environments.",
																"text": "They will be extended for each environment by values in the\n[`environments`](#environments) array.\n\nCloud testing services such as BrowserStack may have unique capabilities.\nItâ€™s important to use the proper capabilities for the WebDriver server or\ncloud service being used to run tests.\n\n* [Selenium capabilities](https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities)\n* [BrowserStack capabilities](https://www.browserstack.com/automate/capabilities)\n* [CrossBrowserTesting capabilities](https://help.crossbrowsertesting.com/selenium-testing/automation-capabilities)\n* [Sauce Labs capabilities](https://wiki.saucelabs.com/display/DOCS/Test+Configuration+Options#TestConfigurationOptions-Selenium-SpecificOptions) and [environments](https://saucelabs.com/platforms)\n* [TestingBot capabilities](https://testingbot.com/support/other/test-options) and [environments](https://testingbot.com/support/getting-started/browsers.html)\n\n[Chrome-specific options](https://sites.google.com/a/chromium.org/chromedriver/capabilities)\nmay be passed using a `goog:chromeOptions` capability.\n\n[Firefox-specific options](https://github.com/mozilla/geckodriver#firefox-capabilities)\nmay be passed using a `moz:firefoxOptions` capability.\n\nIntern will automatically provide certain capabilities to provide better\nfeedback with cloud service dashboards:\n\n* `name` will be set to the name of the test config\n* `build` will be set to the commit ID from the `TRAVIS_COMMIT` and\n  `BUILD_TAG` environment variables, if either exists\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 124,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 778,
															"name": "connectTimeout",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Time to wait for contact from a remote server"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 131,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 779,
															"name": "coverage",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "An array of file paths or globs that should be instrumented for code\ncoverage, or false to completely disable coverage.",
																"text": "This property should point to the actual JavaScript files that will be\nexecuted, not pre-transpiled sources (coverage results will still be\nmapped back to original sources). Coverage data will be collected for\nthese files even if theyâ€™re not loaded by Intern for tests, allowing a\ntest writer to see which files _havenâ€™t_ been tested, as well as coverage\non files that were tested.\n\nWhen this value is unset, Intern will still look for coverage data on a\nglobal coverage variable, and it will request coverage data from remote\nsessions. Explicitly setting coverage to false will prevent Intern from\neven checking for coverage data.\n\n> ðŸ’¡This property replaces the `excludeInstrumentation` property used in\nprevious versions of Intern, which acted as a filter rather than an\ninclusive list.\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 153,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 766,
															"name": "coverageVariable",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The global variable that will be used to store coverage data"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 42,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 767,
															"name": "debug",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "When set to true, Intern will emit 'log' events for many internal\noperations. Reporters that register for these events, such as the Runner\nreporter, will display them during testing."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 49,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 768,
															"name": "defaultTimeout",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "This is the number of milliseconds that Intern will wait for an\n[asynchronous test](https://github.com/theintern/intern/blob/master/docs/writing_tests.md#testing-asynchronous-code)\nto complete before timing out. A timed out test is considered to have\nfailed."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 57,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 769,
															"name": "description",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "A description for this test run"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 60,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 780,
															"name": "environments",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The environments that will be used to run tests.",
																"text": "Its value can be a single browser name or an environment object, or an\narray of these.\n\n```js\nenvironments: 'chrome'\nenvironments: ['chrome', 'firefox']\nenvironments: { browserName: 'chrome', version: '57.0' }\nenvironments: { browserName: 'chrome', fixSessionCapabilities: false }\n```\n\nThe syntax for browser names and other properties depends on where tests\nare being run. For example, when running tests using a local Selenium\nserver, the browser name should be the lowercase name of a locally\navailable browser, such as â€˜chromeâ€™ or â€˜firefoxâ€™, and other properties\nsuch as the platform name will generally be ignored. When running on a\ncloud testing service such as [Sauce Labs](https://wiki.saucelabs.com/display/DOCS/Test+Configuration+Options#TestConfigurationOptions-RequiredSeleniumTestConfigurationSettings)\nor [BrowserStack](https://www.browserstack.com/automate/capabilities),\nbrowser names and other properties may have different acceptable values\n(e.g., â€˜googlechromeâ€™ instead of â€˜chromeâ€™, or â€˜MacOSâ€™ vs â€˜OSXâ€™).\n\nThe [fixSessionCapabilities](https://theintern.io/docs.html#Leadfoot/2/api/Server/fixsessioncapabilities)\nproperty determines whether feature and defect tests will be run in the\nremote browser. Setting it to `false` entirely disables feature tests\n(assuming that all features are enabled), while setting it to\n`'no-detect'` will set certain already-known feature and defect flags\nbased on the browser and platform. The current set of capabilities are\navailable on `this.remote.session.capabilities` in functional tests.\n\n> ðŸ’¡Note that 'node' is an environment. If no environments are specified,\nthe Node executor will automatically add 'node' to the resolved config.\nIf any environments are specified, though, unit tests will only be run in\nthis environments.\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 191,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 781,
															"name": "excludeInstrumentation",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 194,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 770,
															"name": "filterErrorStack",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "If true, filter external library calls and runtime calls out of error\nstacks."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 66,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 782,
															"name": "functionalBaseUrl",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The base URL to use for relative addresses in functional tests"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 197,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 783,
															"name": "functionalCoverage",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether to collect coverage data from functional tests"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 200,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 784,
															"name": "functionalSuites",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "A list of paths or glob expressions that point to functional suites.",
																"text": "Functional suites are files that register\n[WebDriver tests](writing_tests.md).\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 208,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 785,
															"name": "functionalTimeouts",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Default timeout values for functional tests",
																"text": "  * **find** is the time to wait for findBy commands to find an element\n  * **executeAsync** is the time to wait for executeAsync calls to\n    complete\n  * **pageLoad** is the time to wait for a page to finish loading\n    synchronous resources\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 219,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 771,
															"name": "grep",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "This property is a regular expression that is used to filter which tests\nare run. Grep operates on test IDs. A test ID is the concatenation of a\ntest name with all of its parent suite names. Every test ID that matches\nthe current grep expression will be run."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 74,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 786,
															"name": "heartbeatInterval",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "How often to send a heartbeat message to a remote browser, in seconds"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 234,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 787,
															"name": "instrumenterOptions",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "An object containing options for the\n[Istanbul instrumenter](https://github.com/istanbuljs/istanbuljs/blob/master/packages/istanbul-lib-instrument/api.md#instrumenter)."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 240,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 772,
															"name": "internPath",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The path to Intern. This will always end with a path separator (e.g., /)."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 79,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 788,
															"name": "leaveRemoteOpen",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether to leave the remote browser open after testing.",
																"text": "Normally when Intern runs tests on remote browsers, it shuts the browser\ndown when testing is finished. However, you may sometimes want to inspect\nthe state of a remote browser after tests have run, particularly if\nyou're trying to debug why a test is failing. Setting `leaveRemoteOpen`\nto true will cause Intern to leave the browser open after testing.\nSetting it to `'fail'` will cause Intern to leave it open only if there\nwere test failures.\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 253,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 802,
															"name": "loader",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The loader used to load test suites and application modules.",
																"text": "When passed in as part of a config object, the `loader` property can be a\nstring with a loader name or the path to a loader script. It may also be\nan object with `script` and `config` properties. Intern provides built-in\nloader scripts for Dojo and Dojo2, which can be specified with the IDs\n'dojo' and 'dojo2'.\n\n```ts\nloader: 'dojo2'\nloader: 'tests/loader.js'\nloader: {\n    script: 'dojo',\n    config: {\n        packages: [\n            { name: 'app', location: './js' }\n        ]\n    }\n}\n```\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 426,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 789,
															"name": "maxConcurrency",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The number of concurrent remote test sessions to run at once.",
																"text": "The default value is Infinity, meaning Intern will try to run all of its\ntest sessions in parallel. Note that cloud testing services often limit\nthe number of concurrent sessions they will allow to 2 or 5.\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 262,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 773,
															"name": "name",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "A top-level name for this configuration."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 82,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 774,
															"name": "node",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 84,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 804,
															"name": "plugins",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "A list of scripts or modules to load before suites are loaded."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 470,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 790,
															"name": "proxy",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "A proxy that should be used for outgoing web connections. If specified,\nthis will be used for Intern's WebDriver client instead of the Dig Dug\ntunnel's proxy value."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 269,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 791,
															"name": "remoteOptions",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Options to pass to the remote runner."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 274,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 803,
															"name": "reporters",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "A list of reporter names or descriptors.",
																"text": "Reporters specified in this list must have been previously installed\nusing\n[`registerReporter`](https://theintern.io/docs.html#Intern/4/api/lib%2Fexecutors%2FExecutor/registerreporter)\nor\n[`registerPlugin`](https://theintern.io/docs.html#Intern/4/api/lib%2Fexecutors%2FExecutor/registerplugin).\n\nList entries may be reporter names or objects of the format\n\n```js\n{\n    name: 'reporter name',\n    options: {\n        // reporter-specific options\n    }\n}\n```\n\nThe built-in reporters under Node are:\n  * benchmark - output benchmark test results\n  * cobertura - output coverage data in the cobertura format\n  * htmlcoverage - output coverage data as an HTML report\n  * jsoncoverage - output coverage data in a JSON format\n  * junit - output results in JUnit format\n  * lcov - output coverage results in lcov format\n  * pretty - draw text results in a terminal\n  * runner - output test results as formatted text (default Node reporter)\n  * simple - output test results as simple text\n  * teamcity - output results in TeamCity format\n\nThe built-in reporters available in browsers are:\n  * console - output to the browser console\n  * dom - output results as text in the DOM\n  * html - output a pretty HTML report (default browser reporter)\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 465,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 807,
															"name": "require",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 497,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 808,
															"name": "requires",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 498,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 792,
															"name": "runInSync",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "If true, a remote will wait for reponses from Intern for any executor\nevents."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 280,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 809,
															"name": "scripts",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 499,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 793,
															"name": "serveOnly",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "If true, start Intern's static test server but do not run any tests."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 283,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 794,
															"name": "serverPort",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The port Intern's static server will listen on during functional tests."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 288,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 795,
															"name": "serverUrl",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The URL a remote should use to access Intern's static server. By default\nthis is http://localhost:9000, but the domain or port may be different if\nIntern is behind a proxy."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 295,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 775,
															"name": "sessionId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "An identifier for this test session. By default it will have the value\n''."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 90,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 776,
															"name": "showConfig",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "If true, display the resolved config and exit"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 93,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 796,
															"name": "socketPort",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The port that a remote will use to access Intern's websocket server. The\nhostname will be the same as for serverUrl. For example, if serverPort is\nset to 9001 and the default serverUrl is used (http://localhost:9000),\nthe full websocket URL will be ws://localhost:9001."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 303,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 797,
															"name": "socketTimeout",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The number of milliseconds to wait before a websocket message is considered\nto be timed out."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 309,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 805,
															"name": "suites",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "A list of paths or glob expressions that point to suite scripts.",
																"text": "```js\n{\n    suites: [\n        'tests/unit/**\\/*.js',\n        'tests/intergration/request.js'\n    ]\n}\n```\n\nNote that using globs with the browser client requires that Intern's\nserver be used to serve the tests. The server can be run in standalone\nmode by setting the `serveOnly` option.\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 488,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 806,
															"name": "tsconfig",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "An optional path to a tsconfig for ts-node, or false if TypeScript\nsupport is not needed. This option can be used if tests need to use a\ndifferent tsconfig than the project uses normally."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 495,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 798,
															"name": "tunnel",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The Dig Dug tunnel class to use for WebDriver testing.",
																"text": "There are several built in tunnel types, and others can be added through\nthe Node executorâ€™s [`registerPlugin`\nmethod](./architecture.md#extension-points).\n\nThe built in tunnel classes are:\n\n* 'null'\n* 'selenium'\n* 'browserstack'\n* 'cbt' (CrossBrowserTesting)\n* 'saucelabs'\n* 'testingbot'\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 327,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 799,
															"name": "tunnelOptions",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Options for the currently selected tunnel.",
																"text": "The available options depend on the current tunnel. Common options\ninclude:\n\n** All tunnels**\n\n| Property   | Value                                                    |\n| :---       | :---                                                     |\n| `username` | Username for the tunnel service (e.g., BrowserStack)     |\n| `apiKey`   | API key for the tunnel service (e.g., BrowserStack)      |\n| `pathname` | The path for the tunnelâ€™s REST endpoint (e.g., `wd/hub`) |\n\n**Selenium tunnel**\n\n| Property  | Value                                                                   |\n| :---      | :---                                                                    |\n| `drivers` | A list of driver names, or objects with `name` and `options` properties |\n| `verbose` | If true, show tunnel debug information                                  |\n\nSee also:\n\n* [[https://theintern.io/docs.html#Dig%20Dug/2/api/Tunnel/tunnelproperties|Tunnel]]\n* [[https://theintern.io/docs.html#Dig%20Dug/2/api/SeleniumTunnel/seleniumproperties|SeleniumTunnel]]\n* [[https://theintern.io/docs.html#Dig%20Dug/2/api/BrowserStackTunnel/browserstackproperties|BrowserStackTunnel]]\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 356,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 801,
															"name": "warnOnUncaughtException",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "By default, an Intern session will fail if the Executor catches a\nbrowser-level unhandled error. This setting allows unhandled errors to be\ntreated as warnings instead of failing errors. If this setting is true or\nset to a RegExp that matches an unhandled error, Intern will emit a warning\nrather than failing the test run."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 374,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 800,
															"name": "warnOnUnhandledRejection",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "By default, an Intern session will fail if the Executor catches a\nbrowser-level unhandled Promise rejection. This setting allows unhandled\nrejections to be treated as warnings instead of failing errors. If this\nsetting is true or set to a RegExp that matches the reason for an unhandled\nrejection, Intern will emit a warning rather than failing the test run."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 365,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																760,
																762,
																761,
																763,
																764,
																765,
																777,
																778,
																779,
																766,
																767,
																768,
																769,
																780,
																781,
																770,
																782,
																783,
																784,
																785,
																771,
																786,
																787,
																772,
																788,
																802,
																789,
																773,
																774,
																804,
																790,
																791,
																803,
																807,
																808,
																792,
																809,
																793,
																794,
																795,
																775,
																776,
																796,
																797,
																805,
																806,
																798,
																799,
																801,
																800
															]
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 755,
										"name": "default"
									},
									"overwrites": {
										"type": "reference",
										"name": "Executor<Events, Config, Plugins>.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Executor<Events, Config, Plugins>.constructor"
							}
						},
						{
							"id": 818,
							"name": "_config",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 82,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"id": 1018,
								"name": "Config"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._config"
							}
						},
						{
							"id": 821,
							"name": "_errorFormatter",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 85,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reference",
										"name": "default"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._errorFormatter"
							}
						},
						{
							"id": 820,
							"name": "_events",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 84,
									"character": 12
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 1086,
											"name": "Events"
										}
									],
									"name": "InternEvent"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._events"
							}
						},
						{
							"id": 824,
							"name": "_hasEmittedErrors",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 88,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false",
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._hasEmittedErrors"
							}
						},
						{
							"id": 822,
							"name": "_hasSuiteErrors",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 86,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false",
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._hasSuiteErrors"
							}
						},
						{
							"id": 823,
							"name": "_hasTestErrors",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 87,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false",
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._hasTestErrors"
							}
						},
						{
							"id": 833,
							"name": "_listeners",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 94,
									"character": 12
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 834,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": {
										"id": 835,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 836,
												"name": "event",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "array",
											"elementType": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "Listener"
											}
										}
									}
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._listeners"
							}
						},
						{
							"id": 825,
							"name": "_loader",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 89,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Loader"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._loader"
							}
						},
						{
							"id": 827,
							"name": "_loaderInit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 91,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Loader"
											}
										],
										"name": "Promise"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._loaderInit"
							}
						},
						{
							"id": 826,
							"name": "_loaderOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 90,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._loaderOptions"
							}
						},
						{
							"id": 832,
							"name": "_loadingPluginOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 93,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._loadingPluginOptions"
							}
						},
						{
							"id": 828,
							"name": "_loadingPlugins",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 92,
									"character": 12
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reflection",
									"declaration": {
										"id": 829,
										"name": "__type",
										"kind": 65536,
										"kindString": "Type literal",
										"flags": {},
										"children": [
											{
												"id": 831,
												"name": "init",
												"kind": 1024,
												"kindString": "Property",
												"flags": {},
												"sources": [
													{
														"fileName": "src/lib/executors/Executor.ts",
														"line": 92,
														"character": 45
													}
												],
												"type": {
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "void"
														}
													],
													"name": "CancellablePromise"
												}
											},
											{
												"id": 830,
												"name": "name",
												"kind": 1024,
												"kindString": "Property",
												"flags": {},
												"sources": [
													{
														"fileName": "src/lib/executors/Executor.ts",
														"line": 92,
														"character": 31
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"groups": [
											{
												"title": "Properties",
												"kind": 1024,
												"children": [
													831,
													830
												]
											}
										]
									}
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._loadingPlugins"
							}
						},
						{
							"id": 837,
							"name": "_plugins",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 95,
									"character": 12
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 838,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": {
										"id": 839,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 840,
												"name": "name",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._plugins"
							}
						},
						{
							"id": 841,
							"name": "_reporters",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 96,
									"character": 12
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Reporter"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._reporters"
							}
						},
						{
							"id": 843,
							"name": "_reportersInitialized",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 98,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._reportersInitialized"
							}
						},
						{
							"id": 819,
							"name": "_rootSuite",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 83,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "default"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._rootSuite"
							}
						},
						{
							"id": 842,
							"name": "_runTask",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 97,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "CancellablePromise"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._runTask"
							}
						},
						{
							"id": 844,
							"name": "config",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"comment": {
								"shortText": "The resolved configuration for this executor."
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 175,
									"character": 6
								}
							],
							"getSignature": [
								{
									"id": 845,
									"name": "config",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The resolved configuration for this executor."
									},
									"type": {
										"type": "reference",
										"name": "C"
									}
								}
							]
						},
						{
							"id": 810,
							"name": "environment",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Browser.ts",
									"line": 70,
									"character": 6
								}
							],
							"getSignature": [
								{
									"id": 811,
									"name": "environment",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "RuntimeEnvironment"
									}
								}
							]
						},
						{
							"id": 846,
							"name": "suites",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"comment": {
								"shortText": "The root suites managed by this executor"
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 182,
									"character": 6
								}
							],
							"getSignature": [
								{
									"id": 847,
									"name": "suites",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The root suites managed by this executor"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "default"
										}
									}
								}
							]
						},
						{
							"id": 982,
							"name": "_afterRun",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 782,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 983,
									"name": "_afterRun",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Code to execute after the main test run has finished to shut down the test\nsystem."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "CancellablePromise"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor._afterRun"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._afterRun"
							}
						},
						{
							"id": 984,
							"name": "_assignPlugin",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 789,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 985,
									"name": "_assignPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Add a resolved plugin to the internal plugins list"
									},
									"parameters": [
										{
											"id": 986,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 987,
											"name": "plugin",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor._assignPlugin"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._assignPlugin"
							}
						},
						{
							"id": 988,
							"name": "_beforeRun",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 805,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 989,
									"name": "_beforeRun",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Code to execute before the main test run has started to set up the test\nsystem. This is where Executors can do any last-minute configuration\nbefore the testing process begins.",
										"text": "This method returns a CancellablePromise that resolves to a boolean. A\nvalue of true indicates that Intern should skip running tests and exit\nnormally.\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "CancellablePromise"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor._beforeRun"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._beforeRun"
							}
						},
						{
							"id": 992,
							"name": "_drainEventQueue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 854,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 993,
									"name": "_drainEventQueue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Emit any queued events. The event queue will be empty after this method\nruns."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "CancellablePromise"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor._drainEventQueue"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._drainEventQueue"
							}
						},
						{
							"id": 994,
							"name": "_emitCoverage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 865,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 995,
									"name": "_emitCoverage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 996,
											"name": "source",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "void"
													}
												],
												"name": "CancellablePromise"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor._emitCoverage"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._emitCoverage"
							}
						},
						{
							"id": 990,
							"name": "_initReporters",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 818,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 991,
									"name": "_initReporters",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Instantiate any configured built-in reporters"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "CancellablePromise"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor._initReporters"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._initReporters"
							}
						},
						{
							"id": 997,
							"name": "_loadLoader",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 879,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 998,
									"name": "_loadLoader",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Load a loader"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor._loadLoader"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._loadLoader"
							}
						},
						{
							"id": 1001,
							"name": "_loadPlugins",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 935,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1002,
									"name": "_loadPlugins",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Load scripts in the `plugins` list using the platform's native loading\nmechanism"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "CancellablePromise"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor._loadPlugins"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._loadPlugins"
							}
						},
						{
							"id": 999,
							"name": "_loadPluginsWithLoader",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 923,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1000,
									"name": "_loadPluginsWithLoader",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Load scripts in the `requires` list using an external loader, if\nconfigured, or the platform's native loading mechanism"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "CancellablePromise"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor._loadPluginsWithLoader"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._loadPluginsWithLoader"
							}
						},
						{
							"id": 1003,
							"name": "_loadScripts",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 947,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1004,
									"name": "_loadScripts",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Load a list of scripts using a given loader. These will be loaded\nsequentially in order."
									},
									"parameters": [
										{
											"id": 1005,
											"name": "scripts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "PluginDescriptor"
												}
											}
										},
										{
											"id": 1006,
											"name": "loader",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1007,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 1008,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1009,
																	"name": "script",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "intrinsic",
																		"name": "void"
																	}
																],
																"name": "Promise"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "CancellablePromise"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor._loadScripts"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._loadScripts"
							}
						},
						{
							"id": 1010,
							"name": "_loadSuites",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 982,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1011,
									"name": "_loadSuites",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Load suites"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "CancellablePromise"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor._loadSuites"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._loadSuites"
							}
						},
						{
							"id": 1012,
							"name": "_processOption",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 994,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1013,
									"name": "_processOption",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Process an option"
									},
									"parameters": [
										{
											"id": 1014,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"id": 1018,
													"name": "Config"
												}
											}
										},
										{
											"id": 1015,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor._processOption"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._processOption"
							}
						},
						{
							"id": 816,
							"name": "_resolveConfig",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Browser.ts",
									"line": 95,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 817,
									"name": "_resolveConfig",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "void"
													}
												]
											}
										],
										"name": "CancellablePromise"
									},
									"overwrites": {
										"type": "reference",
										"name": "Executor._resolveConfig"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Executor._resolveConfig"
							}
						},
						{
							"id": 1016,
							"name": "_runTests",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 1033,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1017,
									"name": "_runTests",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Runs each of the root suites, limited to a certain number of suites at\nthe same time by `maxConcurrency`."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "CancellablePromise"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor._runTests"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._runTests"
							}
						},
						{
							"id": 852,
							"name": "addSuite",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 232,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 853,
									"name": "addSuite",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Add a suite to the set of suites that will be run when `run` is called.",
										"text": "The suite is added by calling a factory function. The use of a factory\nallows for distinct instances of a given suite to be create when an\nexecutor has multiple root suites.\n\n```js\nintern.addSuite(parent => {\n    const suite = new Suite({\n        name: 'create new',\n        tests: [\n            new Test({\n                name: 'new test',\n                test: () => assert.doesNotThrow(() => new Component())\n            })\n        ]\n    });\n    parent.add(suite);\n});\n```\n"
									},
									"parameters": [
										{
											"id": 854,
											"name": "factory",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "A function that will add a new Suite object to a given\nparent suite.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 855,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 856,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 857,
																	"name": "parentSuite",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "default"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.addSuite"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor.addSuite"
							}
						},
						{
							"id": 858,
							"name": "configure",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 240,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 859,
									"name": "configure",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Configure the executor with an object containing\n[[lib/executors/Executor.Config]] properties."
									},
									"parameters": [
										{
											"id": 860,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 861,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 862,
															"name": "bail",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "By default, Intern will run all configured tests. Setting this option\nto `true` will cause Intern to stop running tests after the first failure."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 18,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 864,
															"name": "basePath",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The path to the project base. This will always end with a path separator\n(e.g., /)."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 26,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 863,
															"name": "baseline",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 20,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 865,
															"name": "benchmark",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "This property must be set to `true` for benchmark tests to run. If it is\nunset or `false`, any suites registered using the benchmark interface will\nbe ignored."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 33,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 866,
															"name": "benchmarkConfig",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 35,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 867,
															"name": "browser",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 37,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 879,
															"name": "capabilities",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The default capabilities for all test environments.",
																"text": "They will be extended for each environment by values in the\n[`environments`](#environments) array.\n\nCloud testing services such as BrowserStack may have unique capabilities.\nItâ€™s important to use the proper capabilities for the WebDriver server or\ncloud service being used to run tests.\n\n* [Selenium capabilities](https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities)\n* [BrowserStack capabilities](https://www.browserstack.com/automate/capabilities)\n* [CrossBrowserTesting capabilities](https://help.crossbrowsertesting.com/selenium-testing/automation-capabilities)\n* [Sauce Labs capabilities](https://wiki.saucelabs.com/display/DOCS/Test+Configuration+Options#TestConfigurationOptions-Selenium-SpecificOptions) and [environments](https://saucelabs.com/platforms)\n* [TestingBot capabilities](https://testingbot.com/support/other/test-options) and [environments](https://testingbot.com/support/getting-started/browsers.html)\n\n[Chrome-specific options](https://sites.google.com/a/chromium.org/chromedriver/capabilities)\nmay be passed using a `goog:chromeOptions` capability.\n\n[Firefox-specific options](https://github.com/mozilla/geckodriver#firefox-capabilities)\nmay be passed using a `moz:firefoxOptions` capability.\n\nIntern will automatically provide certain capabilities to provide better\nfeedback with cloud service dashboards:\n\n* `name` will be set to the name of the test config\n* `build` will be set to the commit ID from the `TRAVIS_COMMIT` and\n  `BUILD_TAG` environment variables, if either exists\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 124,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 880,
															"name": "connectTimeout",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Time to wait for contact from a remote server"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 131,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 881,
															"name": "coverage",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "An array of file paths or globs that should be instrumented for code\ncoverage, or false to completely disable coverage.",
																"text": "This property should point to the actual JavaScript files that will be\nexecuted, not pre-transpiled sources (coverage results will still be\nmapped back to original sources). Coverage data will be collected for\nthese files even if theyâ€™re not loaded by Intern for tests, allowing a\ntest writer to see which files _havenâ€™t_ been tested, as well as coverage\non files that were tested.\n\nWhen this value is unset, Intern will still look for coverage data on a\nglobal coverage variable, and it will request coverage data from remote\nsessions. Explicitly setting coverage to false will prevent Intern from\neven checking for coverage data.\n\n> ðŸ’¡This property replaces the `excludeInstrumentation` property used in\nprevious versions of Intern, which acted as a filter rather than an\ninclusive list.\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 153,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 868,
															"name": "coverageVariable",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The global variable that will be used to store coverage data"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 42,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 869,
															"name": "debug",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "When set to true, Intern will emit 'log' events for many internal\noperations. Reporters that register for these events, such as the Runner\nreporter, will display them during testing."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 49,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 870,
															"name": "defaultTimeout",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "This is the number of milliseconds that Intern will wait for an\n[asynchronous test](https://github.com/theintern/intern/blob/master/docs/writing_tests.md#testing-asynchronous-code)\nto complete before timing out. A timed out test is considered to have\nfailed."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 57,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 871,
															"name": "description",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "A description for this test run"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 60,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 882,
															"name": "environments",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The environments that will be used to run tests.",
																"text": "Its value can be a single browser name or an environment object, or an\narray of these.\n\n```js\nenvironments: 'chrome'\nenvironments: ['chrome', 'firefox']\nenvironments: { browserName: 'chrome', version: '57.0' }\nenvironments: { browserName: 'chrome', fixSessionCapabilities: false }\n```\n\nThe syntax for browser names and other properties depends on where tests\nare being run. For example, when running tests using a local Selenium\nserver, the browser name should be the lowercase name of a locally\navailable browser, such as â€˜chromeâ€™ or â€˜firefoxâ€™, and other properties\nsuch as the platform name will generally be ignored. When running on a\ncloud testing service such as [Sauce Labs](https://wiki.saucelabs.com/display/DOCS/Test+Configuration+Options#TestConfigurationOptions-RequiredSeleniumTestConfigurationSettings)\nor [BrowserStack](https://www.browserstack.com/automate/capabilities),\nbrowser names and other properties may have different acceptable values\n(e.g., â€˜googlechromeâ€™ instead of â€˜chromeâ€™, or â€˜MacOSâ€™ vs â€˜OSXâ€™).\n\nThe [fixSessionCapabilities](https://theintern.io/docs.html#Leadfoot/2/api/Server/fixsessioncapabilities)\nproperty determines whether feature and defect tests will be run in the\nremote browser. Setting it to `false` entirely disables feature tests\n(assuming that all features are enabled), while setting it to\n`'no-detect'` will set certain already-known feature and defect flags\nbased on the browser and platform. The current set of capabilities are\navailable on `this.remote.session.capabilities` in functional tests.\n\n> ðŸ’¡Note that 'node' is an environment. If no environments are specified,\nthe Node executor will automatically add 'node' to the resolved config.\nIf any environments are specified, though, unit tests will only be run in\nthis environments.\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 191,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 883,
															"name": "excludeInstrumentation",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 194,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 872,
															"name": "filterErrorStack",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "If true, filter external library calls and runtime calls out of error\nstacks."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 66,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 884,
															"name": "functionalBaseUrl",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The base URL to use for relative addresses in functional tests"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 197,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 885,
															"name": "functionalCoverage",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether to collect coverage data from functional tests"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 200,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 886,
															"name": "functionalSuites",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "A list of paths or glob expressions that point to functional suites.",
																"text": "Functional suites are files that register\n[WebDriver tests](writing_tests.md).\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 208,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 887,
															"name": "functionalTimeouts",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Default timeout values for functional tests",
																"text": "  * **find** is the time to wait for findBy commands to find an element\n  * **executeAsync** is the time to wait for executeAsync calls to\n    complete\n  * **pageLoad** is the time to wait for a page to finish loading\n    synchronous resources\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 219,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 873,
															"name": "grep",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "This property is a regular expression that is used to filter which tests\nare run. Grep operates on test IDs. A test ID is the concatenation of a\ntest name with all of its parent suite names. Every test ID that matches\nthe current grep expression will be run."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 74,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 888,
															"name": "heartbeatInterval",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "How often to send a heartbeat message to a remote browser, in seconds"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 234,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 889,
															"name": "instrumenterOptions",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "An object containing options for the\n[Istanbul instrumenter](https://github.com/istanbuljs/istanbuljs/blob/master/packages/istanbul-lib-instrument/api.md#instrumenter)."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 240,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 874,
															"name": "internPath",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The path to Intern. This will always end with a path separator (e.g., /)."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 79,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 890,
															"name": "leaveRemoteOpen",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether to leave the remote browser open after testing.",
																"text": "Normally when Intern runs tests on remote browsers, it shuts the browser\ndown when testing is finished. However, you may sometimes want to inspect\nthe state of a remote browser after tests have run, particularly if\nyou're trying to debug why a test is failing. Setting `leaveRemoteOpen`\nto true will cause Intern to leave the browser open after testing.\nSetting it to `'fail'` will cause Intern to leave it open only if there\nwere test failures.\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 253,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 904,
															"name": "loader",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The loader used to load test suites and application modules.",
																"text": "When passed in as part of a config object, the `loader` property can be a\nstring with a loader name or the path to a loader script. It may also be\nan object with `script` and `config` properties. Intern provides built-in\nloader scripts for Dojo and Dojo2, which can be specified with the IDs\n'dojo' and 'dojo2'.\n\n```ts\nloader: 'dojo2'\nloader: 'tests/loader.js'\nloader: {\n    script: 'dojo',\n    config: {\n        packages: [\n            { name: 'app', location: './js' }\n        ]\n    }\n}\n```\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 426,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 891,
															"name": "maxConcurrency",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The number of concurrent remote test sessions to run at once.",
																"text": "The default value is Infinity, meaning Intern will try to run all of its\ntest sessions in parallel. Note that cloud testing services often limit\nthe number of concurrent sessions they will allow to 2 or 5.\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 262,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 875,
															"name": "name",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "A top-level name for this configuration."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 82,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 876,
															"name": "node",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 84,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 906,
															"name": "plugins",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "A list of scripts or modules to load before suites are loaded."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 470,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 892,
															"name": "proxy",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "A proxy that should be used for outgoing web connections. If specified,\nthis will be used for Intern's WebDriver client instead of the Dig Dug\ntunnel's proxy value."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 269,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 893,
															"name": "remoteOptions",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Options to pass to the remote runner."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 274,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 905,
															"name": "reporters",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "A list of reporter names or descriptors.",
																"text": "Reporters specified in this list must have been previously installed\nusing\n[`registerReporter`](https://theintern.io/docs.html#Intern/4/api/lib%2Fexecutors%2FExecutor/registerreporter)\nor\n[`registerPlugin`](https://theintern.io/docs.html#Intern/4/api/lib%2Fexecutors%2FExecutor/registerplugin).\n\nList entries may be reporter names or objects of the format\n\n```js\n{\n    name: 'reporter name',\n    options: {\n        // reporter-specific options\n    }\n}\n```\n\nThe built-in reporters under Node are:\n  * benchmark - output benchmark test results\n  * cobertura - output coverage data in the cobertura format\n  * htmlcoverage - output coverage data as an HTML report\n  * jsoncoverage - output coverage data in a JSON format\n  * junit - output results in JUnit format\n  * lcov - output coverage results in lcov format\n  * pretty - draw text results in a terminal\n  * runner - output test results as formatted text (default Node reporter)\n  * simple - output test results as simple text\n  * teamcity - output results in TeamCity format\n\nThe built-in reporters available in browsers are:\n  * console - output to the browser console\n  * dom - output results as text in the DOM\n  * html - output a pretty HTML report (default browser reporter)\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 465,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 909,
															"name": "require",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 497,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 910,
															"name": "requires",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 498,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 894,
															"name": "runInSync",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "If true, a remote will wait for reponses from Intern for any executor\nevents."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 280,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 911,
															"name": "scripts",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 499,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 895,
															"name": "serveOnly",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "If true, start Intern's static test server but do not run any tests."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 283,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 896,
															"name": "serverPort",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The port Intern's static server will listen on during functional tests."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 288,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 897,
															"name": "serverUrl",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The URL a remote should use to access Intern's static server. By default\nthis is http://localhost:9000, but the domain or port may be different if\nIntern is behind a proxy."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 295,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 877,
															"name": "sessionId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "An identifier for this test session. By default it will have the value\n''."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 90,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 878,
															"name": "showConfig",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "If true, display the resolved config and exit"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 93,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 898,
															"name": "socketPort",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The port that a remote will use to access Intern's websocket server. The\nhostname will be the same as for serverUrl. For example, if serverPort is\nset to 9001 and the default serverUrl is used (http://localhost:9000),\nthe full websocket URL will be ws://localhost:9001."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 303,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 899,
															"name": "socketTimeout",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The number of milliseconds to wait before a websocket message is considered\nto be timed out."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 309,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 907,
															"name": "suites",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "A list of paths or glob expressions that point to suite scripts.",
																"text": "```js\n{\n    suites: [\n        'tests/unit/**\\/*.js',\n        'tests/intergration/request.js'\n    ]\n}\n```\n\nNote that using globs with the browser client requires that Intern's\nserver be used to serve the tests. The server can be run in standalone\nmode by setting the `serveOnly` option.\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 488,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 908,
															"name": "tsconfig",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "An optional path to a tsconfig for ts-node, or false if TypeScript\nsupport is not needed. This option can be used if tests need to use a\ndifferent tsconfig than the project uses normally."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 495,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 900,
															"name": "tunnel",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The Dig Dug tunnel class to use for WebDriver testing.",
																"text": "There are several built in tunnel types, and others can be added through\nthe Node executorâ€™s [`registerPlugin`\nmethod](./architecture.md#extension-points).\n\nThe built in tunnel classes are:\n\n* 'null'\n* 'selenium'\n* 'browserstack'\n* 'cbt' (CrossBrowserTesting)\n* 'saucelabs'\n* 'testingbot'\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 327,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 901,
															"name": "tunnelOptions",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Options for the currently selected tunnel.",
																"text": "The available options depend on the current tunnel. Common options\ninclude:\n\n** All tunnels**\n\n| Property   | Value                                                    |\n| :---       | :---                                                     |\n| `username` | Username for the tunnel service (e.g., BrowserStack)     |\n| `apiKey`   | API key for the tunnel service (e.g., BrowserStack)      |\n| `pathname` | The path for the tunnelâ€™s REST endpoint (e.g., `wd/hub`) |\n\n**Selenium tunnel**\n\n| Property  | Value                                                                   |\n| :---      | :---                                                                    |\n| `drivers` | A list of driver names, or objects with `name` and `options` properties |\n| `verbose` | If true, show tunnel debug information                                  |\n\nSee also:\n\n* [[https://theintern.io/docs.html#Dig%20Dug/2/api/Tunnel/tunnelproperties|Tunnel]]\n* [[https://theintern.io/docs.html#Dig%20Dug/2/api/SeleniumTunnel/seleniumproperties|SeleniumTunnel]]\n* [[https://theintern.io/docs.html#Dig%20Dug/2/api/BrowserStackTunnel/browserstackproperties|BrowserStackTunnel]]\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 356,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 903,
															"name": "warnOnUncaughtException",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "By default, an Intern session will fail if the Executor catches a\nbrowser-level unhandled error. This setting allows unhandled errors to be\ntreated as warnings instead of failing errors. If this setting is true or\nset to a RegExp that matches an unhandled error, Intern will emit a warning\nrather than failing the test run."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 374,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 902,
															"name": "warnOnUnhandledRejection",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "By default, an Intern session will fail if the Executor catches a\nbrowser-level unhandled Promise rejection. This setting allows unhandled\nrejections to be treated as warnings instead of failing errors. If this\nsetting is true or set to a RegExp that matches the reason for an unhandled\nrejection, Intern will emit a warning rather than failing the test run."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 365,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																862,
																864,
																863,
																865,
																866,
																867,
																879,
																880,
																881,
																868,
																869,
																870,
																871,
																882,
																883,
																872,
																884,
																885,
																886,
																887,
																873,
																888,
																889,
																874,
																890,
																904,
																891,
																875,
																876,
																906,
																892,
																893,
																905,
																909,
																910,
																894,
																911,
																895,
																896,
																897,
																877,
																878,
																898,
																899,
																907,
																908,
																900,
																901,
																903,
																902
															]
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.configure"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor.configure"
							}
						},
						{
							"id": 912,
							"name": "emit",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 257,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 913,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Emit an event to all registered listeners.",
										"text": "Event listeners may execute async code, and a failing handler (one that\nrejects or throws an error) will cause the emit to fail.\n",
										"returns": "a CancellablePromise that resolves when all listeners have processed the event\n"
									},
									"typeParameter": [
										{
											"id": 914,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "NoDataEvents"
											}
										}
									],
									"parameters": [
										{
											"id": 915,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the name of the event to emit"
											},
											"type": {
												"type": "reference",
												"name": "T"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "CancellablePromise"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.emit"
									}
								},
								{
									"id": 916,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 917,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"id": 1086,
													"name": "Events"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 918,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "T"
											}
										},
										{
											"id": 919,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "indexedAccess",
												"indexType": {
													"type": "reference",
													"name": "T"
												},
												"objectType": {
													"type": "reference",
													"id": 1086,
													"name": "Events"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "CancellablePromise"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.emit"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor.emit"
							}
						},
						{
							"id": 848,
							"name": "formatError",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 190,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 849,
									"name": "formatError",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Format an error, normalizing the stack trace and resolving source map\nreferences"
									},
									"parameters": [
										{
											"id": 850,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										},
										{
											"id": 851,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "ErrorFormatOptions"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.formatError"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor.formatError"
							}
						},
						{
							"id": 920,
							"name": "getInterface",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 354,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 921,
									"name": "getInterface",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a registered interface plugin.",
										"text": "This method calls `getPlugin` behind the scenes.\n",
										"returns": "the interface, which may be an object or a callable function, or\nundefined if no such interface was registered.\n"
									},
									"parameters": [
										{
											"id": 922,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the name of the interface"
											},
											"type": {
												"type": "literal",
												"value": "object"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ObjectInterface"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.getInterface"
									}
								},
								{
									"id": 923,
									"name": "getInterface",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 924,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "literal",
												"value": "tdd"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TddInterface"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.getInterface"
									}
								},
								{
									"id": 925,
									"name": "getInterface",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 926,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "literal",
												"value": "bdd"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BddInterface"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.getInterface"
									}
								},
								{
									"id": 927,
									"name": "getInterface",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 928,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "literal",
												"value": "benchmark"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BenchmarkInterface"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.getInterface"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor.getInterface"
							}
						},
						{
							"id": 929,
							"name": "getPlugin",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 370,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 930,
									"name": "getPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get any resources registered by a particular plugin.",
										"returns": "the resource registered for the given plugin name, or undefined\nif no such plugin was registered.\n"
									},
									"typeParameter": [
										{
											"id": 931,
											"name": "Y",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "literal",
												"value": "reporter"
											}
										}
									],
									"parameters": [
										{
											"id": 932,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the type of plugin (e.g., 'interface' or 'reporter')"
											},
											"type": {
												"type": "reference",
												"name": "Y"
											}
										},
										{
											"id": 933,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the name of the plugin"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "indexedAccess",
										"indexType": {
											"type": "reference",
											"name": "Y"
										},
										"objectType": {
											"type": "reference",
											"name": "Plugins"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.getPlugin"
									}
								},
								{
									"id": 934,
									"name": "getPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 935,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "literal",
												"value": "chai"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ChaiStatic"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.getPlugin"
									}
								},
								{
									"id": 936,
									"name": "getPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 937,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "literal",
												"value": "interface.object"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ObjectInterface"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.getPlugin"
									}
								},
								{
									"id": 938,
									"name": "getPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 939,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "literal",
												"value": "interface.tdd"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TddInterface"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.getPlugin"
									}
								},
								{
									"id": 940,
									"name": "getPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 941,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "literal",
												"value": "interface.bdd"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BddInterface"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.getPlugin"
									}
								},
								{
									"id": 942,
									"name": "getPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 943,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "literal",
												"value": "interface.benchmark"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BenchmarkInterface"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.getPlugin"
									}
								},
								{
									"id": 944,
									"name": "getPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 945,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 946,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "T"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.getPlugin"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor.getPlugin"
							}
						},
						{
							"id": 812,
							"name": "loadScript",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Browser.ts",
									"line": 79,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 813,
									"name": "loadScript",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Load a script or scripts via script injection."
									},
									"parameters": [
										{
											"id": 814,
											"name": "script",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "a path to a script\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 815,
											"name": "isEsm",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"defaultValue": "false"
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "CancellablePromise"
									},
									"overwrites": {
										"type": "reference",
										"name": "Executor.loadScript"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Executor.loadScript"
							}
						},
						{
							"id": 947,
							"name": "log",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 398,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 948,
									"name": "log",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This is a convenience method for emitting log events.",
										"text": "When debug mode is enabled, this method emits 'log' events using `emit`.\nOtherwise it does nothing.\n",
										"returns": "a CancellablePromise that resolves when all listeners have finished processing\nthe event.\n"
									},
									"parameters": [
										{
											"id": 949,
											"name": "args",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "A list of arguments that will be stringified and combined\ninto a space-separated message."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "CancellablePromise"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.log"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor.log"
							}
						},
						{
							"id": 950,
							"name": "on",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 457,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 951,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Add a listener for a test event.",
										"text": "```js\nintern.on('error', error => {\n    console.log('An error occurred:', error);\n});\n```\n\nA listener can be notified of all events by registering for the '*'\nevent, or by calling on with only a callback:\n\n```js\nintern.on(event => {\n    console.log(`An ${event.name} event occurred:`, event.data);\n});\n```\nNote that some events are executor-specific. For example, the\n[[lib/executors/Browser]] executor will never emit a tunnelStop\nmessage.\n",
										"returns": "a handle with a `destroy` method that can be used to stop\nlistening\n"
									},
									"typeParameter": [
										{
											"id": 952,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"id": 1086,
													"name": "Events"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 953,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the [[lib/executors/Executor.Events|event]] to listen\nfor"
											},
											"type": {
												"type": "reference",
												"name": "T"
											}
										},
										{
											"id": 954,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "a callback that accepts a single data parameter; it may\nreturn a PromiseLike object if it needs to perform async actions"
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "indexedAccess",
														"indexType": {
															"type": "reference",
															"name": "T"
														},
														"objectType": {
															"type": "reference",
															"id": 1086,
															"name": "Events"
														}
													}
												],
												"name": "Listener"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Handle"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.on"
									}
								},
								{
									"id": 955,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 956,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reflection",
														"declaration": {
															"id": 957,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 959,
																	"name": "data",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {
																		"isOptional": true
																	},
																	"sources": [
																		{
																			"fileName": "src/lib/executors/Executor.ts",
																			"line": 458,
																			"character": 40
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																},
																{
																	"id": 958,
																	"name": "name",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "src/lib/executors/Executor.ts",
																			"line": 458,
																			"character": 26
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"kind": 1024,
																	"children": [
																		959,
																		958
																	]
																}
															]
														}
													}
												],
												"name": "Listener"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Handle"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.on"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor.on"
							}
						},
						{
							"id": 960,
							"name": "registerInterface",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 495,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 961,
									"name": "registerInterface",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register an interface plugin",
										"text": "This is a convenience method for registering test interfaces. This method\ncalls [[lib/executors/Executor.Executor.registerPlugin]] behind the\nscenes using the name `interface.${name}`.\n"
									},
									"parameters": [
										{
											"id": 962,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 963,
											"name": "iface",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.registerInterface"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor.registerInterface"
							}
						},
						{
							"id": 964,
							"name": "registerLoader",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 524,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 965,
									"name": "registerLoader",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register a module loader.",
										"text": "This method sets the loader script that will be used to load plugins and\nsuites. The callback should accept an options object and return a\nfunction that can load modules.\n\n```js\nintern.registerLoader(options: any => {\n    // Register loader can return a Promise if it needs to load something\n    // itself\n    return intern.loadScript('some/loader.js').then(() => {\n        loader.config(options);\n        // Return a function that takes a list of modules and returns a\n        // Promise that resolves when they've been loaded.\n        return (modules: string[]) => {\n            return loader.load(modules);\n        });\n    });\n});\n```\n"
									},
									"parameters": [
										{
											"id": 966,
											"name": "init",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "a loader initialzation callback that should return a loader\nfunction, or a Promise that resolves to a loader function\n"
											},
											"type": {
												"type": "reference",
												"name": "LoaderInit"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.registerLoader"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor.registerLoader"
							}
						},
						{
							"id": 967,
							"name": "registerPlugin",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 565,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 968,
									"name": "registerPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register a plugin.",
										"text": "Plugins are resources that are loaded at the beginning of the testing\nprocess, after the loader but before any suites are registered. The\ncallback may return a Promise if the plugin needs to do some asynchronous\ninitialization. If the plugin is being loaded via the\n[[lib/executors/Executor.Config.plugins|config.plugins]]\nproperty, it's init callback will be passed any configured options. The\nresolved return value of the callback will be returned by\n[[lib/executors/Executor.Executor.getPlugin]].\n\n```js\nintern.registerPlugin('foo', (options: any) => {\n    return {\n        doSomething() {\n            // ...\n        },\n        doSomethingElse() {\n            // ...\n        }\n    };\n});\n```\n\nCode would use the plugin by calling getPlugin:\n\n```js\nconst { doSomething, doSomethingElse } = intern.getPlugin('foo');\ndoSomething();\n```\n"
									},
									"typeParameter": [
										{
											"id": 969,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "literal",
												"value": "reporter"
											}
										}
									],
									"parameters": [
										{
											"id": 970,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "T"
											}
										},
										{
											"id": 971,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the plugin name"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 972,
											"name": "init",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "an initializer function that returns the plugin resource, or\na Promise that resolves to the resource\n"
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "indexedAccess",
														"indexType": {
															"type": "reference",
															"name": "T"
														},
														"objectType": {
															"type": "reference",
															"name": "Plugins"
														}
													}
												],
												"name": "PluginInitializer"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.registerPlugin"
									}
								},
								{
									"id": 973,
									"name": "registerPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 974,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 975,
											"name": "init",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "PluginInitializer"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.registerPlugin"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor.registerPlugin"
							}
						},
						{
							"id": 976,
							"name": "registerReporter",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 609,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 977,
									"name": "registerReporter",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register a reporter plugin",
										"text": "This is a convenience method for registering reporter constructors. This\nmethod calls [[lib/executors/Executor.Executor.registerPlugin]] behind\nthe scenes using the name `reporter.${name}`.\n"
									},
									"parameters": [
										{
											"id": 978,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the reporter name"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 979,
											"name": "init",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReporterInitializer"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.registerReporter"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor.registerReporter"
							}
						},
						{
							"id": 980,
							"name": "run",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 619,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 981,
									"name": "run",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Run tests.",
										"text": "This method sets up the environment for test execution, runs the tests,\nand runs any finalization code afterwards.\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "CancellablePromise"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.run"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor.run"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								756
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								818,
								821,
								820,
								824,
								822,
								823,
								833,
								825,
								827,
								826,
								832,
								828,
								837,
								841,
								843,
								819,
								842
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								844,
								810,
								846
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								982,
								984,
								988,
								992,
								994,
								990,
								997,
								1001,
								999,
								1003,
								1010,
								1012,
								816,
								1016,
								852,
								858,
								912,
								848,
								920,
								929,
								812,
								947,
								950,
								960,
								964,
								967,
								976,
								980
							]
						}
					],
					"sources": [
						{
							"fileName": "src/lib/executors/Browser.ts",
							"line": 18,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"typeArguments": [
								{
									"type": "reference",
									"id": 1086,
									"name": "Events"
								},
								{
									"type": "reference",
									"id": 1018,
									"name": "Config"
								},
								{
									"type": "reference",
									"name": "Plugins"
								}
							],
							"name": "Executor"
						}
					]
				},
				{
					"id": 1086,
					"name": "Events",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Events that may be emitted by an Executor. Each event has at most one\nassociated message type. A few (e.g., afterRun) don't have messages."
					},
					"children": [
						{
							"id": 1087,
							"name": "*",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "A listener can listen for this event to be notified of all events"
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 1080,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "ExecutorEvent"
							}
						},
						{
							"id": 1088,
							"name": "afterRun",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Emitted after the local executor has finished running suites. This is\nfunctionally the same as runEnd."
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 1086,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						},
						{
							"id": 1089,
							"name": "beforeRun",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Emitted before the local executor loads suites"
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 1089,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						},
						{
							"id": 1090,
							"name": "coverage",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Coverage info has been gathered"
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 1092,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "CoverageMessage"
							}
						},
						{
							"id": 1091,
							"name": "deprecated",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "A deprecated method was called"
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 1095,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "DeprecationMessage"
							}
						},
						{
							"id": 1092,
							"name": "error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "An unhandled error occurs"
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 1098,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "Error"
							}
						},
						{
							"id": 1093,
							"name": "log",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "A debug log event"
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 1101,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1094,
							"name": "runEnd",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "All tests have finished running. This is functionally the same as\nafterRun."
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 1107,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						},
						{
							"id": 1095,
							"name": "runStart",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Emitted just before tests start running"
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 1110,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						},
						{
							"id": 1096,
							"name": "suiteAdd",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "A new suite has been added"
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 1113,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "default"
							}
						},
						{
							"id": 1097,
							"name": "suiteEnd",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "A suite has fininshed running"
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 1116,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "default"
							}
						},
						{
							"id": 1098,
							"name": "suiteStart",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "A suite has started running"
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 1119,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "default"
							}
						},
						{
							"id": 1099,
							"name": "testAdd",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "A new test has been added"
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 1122,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "default"
							}
						},
						{
							"id": 1100,
							"name": "testEnd",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "A test has finished"
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 1125,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "default"
							}
						},
						{
							"id": 1101,
							"name": "testStart",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "A test has started"
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 1128,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "default"
							}
						},
						{
							"id": 1102,
							"name": "warning",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "A non-fatal error occurred"
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 1131,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1087,
								1088,
								1089,
								1090,
								1091,
								1092,
								1093,
								1094,
								1095,
								1096,
								1097,
								1098,
								1099,
								1100,
								1101,
								1102
							]
						}
					],
					"sources": [
						{
							"fileName": "src/lib/executors/Executor.ts",
							"line": 1078,
							"character": 17
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"id": 731,
							"name": "NodeEvents"
						}
					]
				}
			],
			"groups": [
				{
					"title": "References",
					"kind": 16777216,
					"children": [
						1103
					]
				},
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						755
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1086
					]
				}
			],
			"sources": [
				{
					"fileName": "src/lib/executors/Browser.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 3,
			"name": "lib/executors/Node",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 4,
					"name": "default",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"children": [
						{
							"id": 5,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 73,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 6,
									"name": "new default",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 7,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 8,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 9,
															"name": "bail",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "By default, Intern will run all configured tests. Setting this option\nto `true` will cause Intern to stop running tests after the first failure."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 18,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 11,
															"name": "basePath",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The path to the project base. This will always end with a path separator\n(e.g., /)."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 26,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 10,
															"name": "baseline",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 20,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 12,
															"name": "benchmark",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "This property must be set to `true` for benchmark tests to run. If it is\nunset or `false`, any suites registered using the benchmark interface will\nbe ignored."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 33,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 13,
															"name": "benchmarkConfig",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 35,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 14,
															"name": "browser",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 37,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 26,
															"name": "capabilities",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The default capabilities for all test environments.",
																"text": "They will be extended for each environment by values in the\n[`environments`](#environments) array.\n\nCloud testing services such as BrowserStack may have unique capabilities.\nItâ€™s important to use the proper capabilities for the WebDriver server or\ncloud service being used to run tests.\n\n* [Selenium capabilities](https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities)\n* [BrowserStack capabilities](https://www.browserstack.com/automate/capabilities)\n* [CrossBrowserTesting capabilities](https://help.crossbrowsertesting.com/selenium-testing/automation-capabilities)\n* [Sauce Labs capabilities](https://wiki.saucelabs.com/display/DOCS/Test+Configuration+Options#TestConfigurationOptions-Selenium-SpecificOptions) and [environments](https://saucelabs.com/platforms)\n* [TestingBot capabilities](https://testingbot.com/support/other/test-options) and [environments](https://testingbot.com/support/getting-started/browsers.html)\n\n[Chrome-specific options](https://sites.google.com/a/chromium.org/chromedriver/capabilities)\nmay be passed using a `goog:chromeOptions` capability.\n\n[Firefox-specific options](https://github.com/mozilla/geckodriver#firefox-capabilities)\nmay be passed using a `moz:firefoxOptions` capability.\n\nIntern will automatically provide certain capabilities to provide better\nfeedback with cloud service dashboards:\n\n* `name` will be set to the name of the test config\n* `build` will be set to the commit ID from the `TRAVIS_COMMIT` and\n  `BUILD_TAG` environment variables, if either exists\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 124,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 27,
															"name": "connectTimeout",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Time to wait for contact from a remote server"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 131,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 28,
															"name": "coverage",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "An array of file paths or globs that should be instrumented for code\ncoverage, or false to completely disable coverage.",
																"text": "This property should point to the actual JavaScript files that will be\nexecuted, not pre-transpiled sources (coverage results will still be\nmapped back to original sources). Coverage data will be collected for\nthese files even if theyâ€™re not loaded by Intern for tests, allowing a\ntest writer to see which files _havenâ€™t_ been tested, as well as coverage\non files that were tested.\n\nWhen this value is unset, Intern will still look for coverage data on a\nglobal coverage variable, and it will request coverage data from remote\nsessions. Explicitly setting coverage to false will prevent Intern from\neven checking for coverage data.\n\n> ðŸ’¡This property replaces the `excludeInstrumentation` property used in\nprevious versions of Intern, which acted as a filter rather than an\ninclusive list.\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 153,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 15,
															"name": "coverageVariable",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The global variable that will be used to store coverage data"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 42,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 16,
															"name": "debug",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "When set to true, Intern will emit 'log' events for many internal\noperations. Reporters that register for these events, such as the Runner\nreporter, will display them during testing."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 49,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 17,
															"name": "defaultTimeout",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "This is the number of milliseconds that Intern will wait for an\n[asynchronous test](https://github.com/theintern/intern/blob/master/docs/writing_tests.md#testing-asynchronous-code)\nto complete before timing out. A timed out test is considered to have\nfailed."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 57,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 18,
															"name": "description",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "A description for this test run"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 60,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 29,
															"name": "environments",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The environments that will be used to run tests.",
																"text": "Its value can be a single browser name or an environment object, or an\narray of these.\n\n```js\nenvironments: 'chrome'\nenvironments: ['chrome', 'firefox']\nenvironments: { browserName: 'chrome', version: '57.0' }\nenvironments: { browserName: 'chrome', fixSessionCapabilities: false }\n```\n\nThe syntax for browser names and other properties depends on where tests\nare being run. For example, when running tests using a local Selenium\nserver, the browser name should be the lowercase name of a locally\navailable browser, such as â€˜chromeâ€™ or â€˜firefoxâ€™, and other properties\nsuch as the platform name will generally be ignored. When running on a\ncloud testing service such as [Sauce Labs](https://wiki.saucelabs.com/display/DOCS/Test+Configuration+Options#TestConfigurationOptions-RequiredSeleniumTestConfigurationSettings)\nor [BrowserStack](https://www.browserstack.com/automate/capabilities),\nbrowser names and other properties may have different acceptable values\n(e.g., â€˜googlechromeâ€™ instead of â€˜chromeâ€™, or â€˜MacOSâ€™ vs â€˜OSXâ€™).\n\nThe [fixSessionCapabilities](https://theintern.io/docs.html#Leadfoot/2/api/Server/fixsessioncapabilities)\nproperty determines whether feature and defect tests will be run in the\nremote browser. Setting it to `false` entirely disables feature tests\n(assuming that all features are enabled), while setting it to\n`'no-detect'` will set certain already-known feature and defect flags\nbased on the browser and platform. The current set of capabilities are\navailable on `this.remote.session.capabilities` in functional tests.\n\n> ðŸ’¡Note that 'node' is an environment. If no environments are specified,\nthe Node executor will automatically add 'node' to the resolved config.\nIf any environments are specified, though, unit tests will only be run in\nthis environments.\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 191,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 30,
															"name": "excludeInstrumentation",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 194,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 19,
															"name": "filterErrorStack",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "If true, filter external library calls and runtime calls out of error\nstacks."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 66,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 31,
															"name": "functionalBaseUrl",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The base URL to use for relative addresses in functional tests"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 197,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 32,
															"name": "functionalCoverage",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether to collect coverage data from functional tests"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 200,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 33,
															"name": "functionalSuites",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "A list of paths or glob expressions that point to functional suites.",
																"text": "Functional suites are files that register\n[WebDriver tests](writing_tests.md).\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 208,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 34,
															"name": "functionalTimeouts",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Default timeout values for functional tests",
																"text": "  * **find** is the time to wait for findBy commands to find an element\n  * **executeAsync** is the time to wait for executeAsync calls to\n    complete\n  * **pageLoad** is the time to wait for a page to finish loading\n    synchronous resources\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 219,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 20,
															"name": "grep",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "This property is a regular expression that is used to filter which tests\nare run. Grep operates on test IDs. A test ID is the concatenation of a\ntest name with all of its parent suite names. Every test ID that matches\nthe current grep expression will be run."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 74,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 35,
															"name": "heartbeatInterval",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "How often to send a heartbeat message to a remote browser, in seconds"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 234,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 36,
															"name": "instrumenterOptions",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "An object containing options for the\n[Istanbul instrumenter](https://github.com/istanbuljs/istanbuljs/blob/master/packages/istanbul-lib-instrument/api.md#instrumenter)."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 240,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 21,
															"name": "internPath",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The path to Intern. This will always end with a path separator (e.g., /)."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 79,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 37,
															"name": "leaveRemoteOpen",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether to leave the remote browser open after testing.",
																"text": "Normally when Intern runs tests on remote browsers, it shuts the browser\ndown when testing is finished. However, you may sometimes want to inspect\nthe state of a remote browser after tests have run, particularly if\nyou're trying to debug why a test is failing. Setting `leaveRemoteOpen`\nto true will cause Intern to leave the browser open after testing.\nSetting it to `'fail'` will cause Intern to leave it open only if there\nwere test failures.\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 253,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 51,
															"name": "loader",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The loader used to load test suites and application modules.",
																"text": "When passed in as part of a config object, the `loader` property can be a\nstring with a loader name or the path to a loader script. It may also be\nan object with `script` and `config` properties. Intern provides built-in\nloader scripts for Dojo and Dojo2, which can be specified with the IDs\n'dojo' and 'dojo2'.\n\n```ts\nloader: 'dojo2'\nloader: 'tests/loader.js'\nloader: {\n    script: 'dojo',\n    config: {\n        packages: [\n            { name: 'app', location: './js' }\n        ]\n    }\n}\n```\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 426,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 38,
															"name": "maxConcurrency",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The number of concurrent remote test sessions to run at once.",
																"text": "The default value is Infinity, meaning Intern will try to run all of its\ntest sessions in parallel. Note that cloud testing services often limit\nthe number of concurrent sessions they will allow to 2 or 5.\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 262,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 22,
															"name": "name",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "A top-level name for this configuration."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 82,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 23,
															"name": "node",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 84,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 53,
															"name": "plugins",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "A list of scripts or modules to load before suites are loaded."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 470,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 39,
															"name": "proxy",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "A proxy that should be used for outgoing web connections. If specified,\nthis will be used for Intern's WebDriver client instead of the Dig Dug\ntunnel's proxy value."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 269,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 40,
															"name": "remoteOptions",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Options to pass to the remote runner."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 274,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 52,
															"name": "reporters",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "A list of reporter names or descriptors.",
																"text": "Reporters specified in this list must have been previously installed\nusing\n[`registerReporter`](https://theintern.io/docs.html#Intern/4/api/lib%2Fexecutors%2FExecutor/registerreporter)\nor\n[`registerPlugin`](https://theintern.io/docs.html#Intern/4/api/lib%2Fexecutors%2FExecutor/registerplugin).\n\nList entries may be reporter names or objects of the format\n\n```js\n{\n    name: 'reporter name',\n    options: {\n        // reporter-specific options\n    }\n}\n```\n\nThe built-in reporters under Node are:\n  * benchmark - output benchmark test results\n  * cobertura - output coverage data in the cobertura format\n  * htmlcoverage - output coverage data as an HTML report\n  * jsoncoverage - output coverage data in a JSON format\n  * junit - output results in JUnit format\n  * lcov - output coverage results in lcov format\n  * pretty - draw text results in a terminal\n  * runner - output test results as formatted text (default Node reporter)\n  * simple - output test results as simple text\n  * teamcity - output results in TeamCity format\n\nThe built-in reporters available in browsers are:\n  * console - output to the browser console\n  * dom - output results as text in the DOM\n  * html - output a pretty HTML report (default browser reporter)\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 465,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 56,
															"name": "require",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 497,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 57,
															"name": "requires",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 498,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 41,
															"name": "runInSync",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "If true, a remote will wait for reponses from Intern for any executor\nevents."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 280,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 58,
															"name": "scripts",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 499,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 42,
															"name": "serveOnly",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "If true, start Intern's static test server but do not run any tests."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 283,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 43,
															"name": "serverPort",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The port Intern's static server will listen on during functional tests."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 288,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 44,
															"name": "serverUrl",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The URL a remote should use to access Intern's static server. By default\nthis is http://localhost:9000, but the domain or port may be different if\nIntern is behind a proxy."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 295,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 24,
															"name": "sessionId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "An identifier for this test session. By default it will have the value\n''."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 90,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 25,
															"name": "showConfig",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "If true, display the resolved config and exit"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 93,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 45,
															"name": "socketPort",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The port that a remote will use to access Intern's websocket server. The\nhostname will be the same as for serverUrl. For example, if serverPort is\nset to 9001 and the default serverUrl is used (http://localhost:9000),\nthe full websocket URL will be ws://localhost:9001."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 303,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 46,
															"name": "socketTimeout",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The number of milliseconds to wait before a websocket message is considered\nto be timed out."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 309,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 54,
															"name": "suites",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "A list of paths or glob expressions that point to suite scripts.",
																"text": "```js\n{\n    suites: [\n        'tests/unit/**\\/*.js',\n        'tests/intergration/request.js'\n    ]\n}\n```\n\nNote that using globs with the browser client requires that Intern's\nserver be used to serve the tests. The server can be run in standalone\nmode by setting the `serveOnly` option.\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 488,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 55,
															"name": "tsconfig",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "An optional path to a tsconfig for ts-node, or false if TypeScript\nsupport is not needed. This option can be used if tests need to use a\ndifferent tsconfig than the project uses normally."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 495,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 47,
															"name": "tunnel",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The Dig Dug tunnel class to use for WebDriver testing.",
																"text": "There are several built in tunnel types, and others can be added through\nthe Node executorâ€™s [`registerPlugin`\nmethod](./architecture.md#extension-points).\n\nThe built in tunnel classes are:\n\n* 'null'\n* 'selenium'\n* 'browserstack'\n* 'cbt' (CrossBrowserTesting)\n* 'saucelabs'\n* 'testingbot'\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 327,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 48,
															"name": "tunnelOptions",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Options for the currently selected tunnel.",
																"text": "The available options depend on the current tunnel. Common options\ninclude:\n\n** All tunnels**\n\n| Property   | Value                                                    |\n| :---       | :---                                                     |\n| `username` | Username for the tunnel service (e.g., BrowserStack)     |\n| `apiKey`   | API key for the tunnel service (e.g., BrowserStack)      |\n| `pathname` | The path for the tunnelâ€™s REST endpoint (e.g., `wd/hub`) |\n\n**Selenium tunnel**\n\n| Property  | Value                                                                   |\n| :---      | :---                                                                    |\n| `drivers` | A list of driver names, or objects with `name` and `options` properties |\n| `verbose` | If true, show tunnel debug information                                  |\n\nSee also:\n\n* [[https://theintern.io/docs.html#Dig%20Dug/2/api/Tunnel/tunnelproperties|Tunnel]]\n* [[https://theintern.io/docs.html#Dig%20Dug/2/api/SeleniumTunnel/seleniumproperties|SeleniumTunnel]]\n* [[https://theintern.io/docs.html#Dig%20Dug/2/api/BrowserStackTunnel/browserstackproperties|BrowserStackTunnel]]\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 356,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 50,
															"name": "warnOnUncaughtException",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "By default, an Intern session will fail if the Executor catches a\nbrowser-level unhandled error. This setting allows unhandled errors to be\ntreated as warnings instead of failing errors. If this setting is true or\nset to a RegExp that matches an unhandled error, Intern will emit a warning\nrather than failing the test run."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 374,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 49,
															"name": "warnOnUnhandledRejection",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "By default, an Intern session will fail if the Executor catches a\nbrowser-level unhandled Promise rejection. This setting allows unhandled\nrejections to be treated as warnings instead of failing errors. If this\nsetting is true or set to a RegExp that matches the reason for an unhandled\nrejection, Intern will emit a warning rather than failing the test run."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 365,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																9,
																11,
																10,
																12,
																13,
																14,
																26,
																27,
																28,
																15,
																16,
																17,
																18,
																29,
																30,
																19,
																31,
																32,
																33,
																34,
																20,
																35,
																36,
																21,
																37,
																51,
																38,
																22,
																23,
																53,
																39,
																40,
																52,
																56,
																57,
																41,
																58,
																42,
																43,
																44,
																24,
																25,
																45,
																46,
																54,
																55,
																47,
																48,
																50,
																49
															]
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 4,
										"name": "default"
									},
									"overwrites": {
										"type": "reference",
										"name": "Executor<NodeEvents, Config, NodePlugins>.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Executor<NodeEvents, Config, NodePlugins>.constructor"
							}
						},
						{
							"id": 132,
							"name": "_config",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 82,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"id": 1018,
								"name": "Config"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._config"
							}
						},
						{
							"id": 62,
							"name": "_coverageFiles",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 64,
									"character": 12
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 61,
							"name": "_coverageMap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 63,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "CoverageMap"
							}
						},
						{
							"id": 135,
							"name": "_errorFormatter",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 85,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reference",
										"name": "default"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._errorFormatter"
							}
						},
						{
							"id": 134,
							"name": "_events",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 84,
									"character": 12
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"id": 731,
											"name": "NodeEvents"
										}
									],
									"name": "InternEvent"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._events"
							}
						},
						{
							"id": 138,
							"name": "_hasEmittedErrors",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 88,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false",
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._hasEmittedErrors"
							}
						},
						{
							"id": 136,
							"name": "_hasSuiteErrors",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 86,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false",
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._hasSuiteErrors"
							}
						},
						{
							"id": 137,
							"name": "_hasTestErrors",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 87,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false",
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._hasTestErrors"
							}
						},
						{
							"id": 64,
							"name": "_instrumentBasePath",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 66,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 67,
							"name": "_instrumentedMaps",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 69,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "MapStore"
							}
						},
						{
							"id": 65,
							"name": "_instrumenter",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 67,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reference",
										"name": "Instrumenter"
									}
								]
							}
						},
						{
							"id": 147,
							"name": "_listeners",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 94,
									"character": 12
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 148,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": {
										"id": 149,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 150,
												"name": "event",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "array",
											"elementType": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "Listener"
											}
										}
									}
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._listeners"
							}
						},
						{
							"id": 139,
							"name": "_loader",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 89,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "Loader"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._loader"
							}
						},
						{
							"id": 141,
							"name": "_loaderInit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 91,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Loader"
											}
										],
										"name": "Promise"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._loaderInit"
							}
						},
						{
							"id": 140,
							"name": "_loaderOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 90,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._loaderOptions"
							}
						},
						{
							"id": 63,
							"name": "_loadingFunctionalSuites",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 65,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							}
						},
						{
							"id": 146,
							"name": "_loadingPluginOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 93,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._loadingPluginOptions"
							}
						},
						{
							"id": 142,
							"name": "_loadingPlugins",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 92,
									"character": 12
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reflection",
									"declaration": {
										"id": 143,
										"name": "__type",
										"kind": 65536,
										"kindString": "Type literal",
										"flags": {},
										"children": [
											{
												"id": 145,
												"name": "init",
												"kind": 1024,
												"kindString": "Property",
												"flags": {},
												"sources": [
													{
														"fileName": "src/lib/executors/Executor.ts",
														"line": 92,
														"character": 45
													}
												],
												"type": {
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "void"
														}
													],
													"name": "CancellablePromise"
												}
											},
											{
												"id": 144,
												"name": "name",
												"kind": 1024,
												"kindString": "Property",
												"flags": {},
												"sources": [
													{
														"fileName": "src/lib/executors/Executor.ts",
														"line": 92,
														"character": 31
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"groups": [
											{
												"title": "Properties",
												"kind": 1024,
												"children": [
													145,
													144
												]
											}
										]
									}
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._loadingPlugins"
							}
						},
						{
							"id": 151,
							"name": "_plugins",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 95,
									"character": 12
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 152,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": {
										"id": 153,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 154,
												"name": "name",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._plugins"
							}
						},
						{
							"id": 155,
							"name": "_reporters",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 96,
									"character": 12
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Reporter"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._reporters"
							}
						},
						{
							"id": 157,
							"name": "_reportersInitialized",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 98,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._reportersInitialized"
							}
						},
						{
							"id": 133,
							"name": "_rootSuite",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 83,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "default"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._rootSuite"
							}
						},
						{
							"id": 156,
							"name": "_runTask",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 97,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "CancellablePromise"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._runTask"
							}
						},
						{
							"id": 71,
							"name": "_sessionSuites",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 71,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "default"
										}
									}
								]
							}
						},
						{
							"id": 66,
							"name": "_sourceMaps",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 68,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "MapStore"
							}
						},
						{
							"id": 68,
							"name": "_unhookRequire",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 70,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 69,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 70,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 59,
							"name": "server",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 60,
									"character": 2
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reference",
										"name": "default"
									}
								]
							}
						},
						{
							"id": 60,
							"name": "tunnel",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 61,
									"character": 2
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reference",
										"name": "default"
									}
								]
							}
						},
						{
							"id": 158,
							"name": "config",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"comment": {
								"shortText": "The resolved configuration for this executor."
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 175,
									"character": 6
								}
							],
							"getSignature": [
								{
									"id": 159,
									"name": "config",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The resolved configuration for this executor."
									},
									"type": {
										"type": "reference",
										"name": "C"
									}
								}
							]
						},
						{
							"id": 72,
							"name": "coverageMap",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 172,
									"character": 6
								}
							],
							"getSignature": [
								{
									"id": 73,
									"name": "coverageMap",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "CoverageMap"
									}
								}
							]
						},
						{
							"id": 74,
							"name": "environment",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 176,
									"character": 6
								}
							],
							"getSignature": [
								{
									"id": 75,
									"name": "environment",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "RuntimeEnvironment"
									}
								}
							]
						},
						{
							"id": 80,
							"name": "hasCoveredFiles",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 188,
									"character": 6
								}
							],
							"getSignature": [
								{
									"id": 81,
									"name": "hasCoveredFiles",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							]
						},
						{
							"id": 76,
							"name": "instrumentedMapStore",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 180,
									"character": 6
								}
							],
							"getSignature": [
								{
									"id": 77,
									"name": "instrumentedMapStore",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "MapStore"
									}
								}
							]
						},
						{
							"id": 78,
							"name": "sourceMapStore",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 184,
									"character": 6
								}
							],
							"getSignature": [
								{
									"id": 79,
									"name": "sourceMapStore",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "MapStore"
									}
								}
							]
						},
						{
							"id": 82,
							"name": "suites",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"comment": {
								"shortText": "The root suites managed by this executor"
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 195,
									"character": 6
								}
							],
							"getSignature": [
								{
									"id": 83,
									"name": "suites",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The root suites managed by this executor"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "default"
										}
									}
								}
							]
						},
						{
							"id": 108,
							"name": "_afterRun",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 314,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 109,
									"name": "_afterRun",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "CancellablePromise"
									},
									"overwrites": {
										"type": "reference",
										"name": "Executor._afterRun"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Executor._afterRun"
							}
						},
						{
							"id": 288,
							"name": "_assignPlugin",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 789,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 289,
									"name": "_assignPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Add a resolved plugin to the internal plugins list"
									},
									"parameters": [
										{
											"id": 290,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 291,
											"name": "plugin",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor._assignPlugin"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._assignPlugin"
							}
						},
						{
							"id": 110,
							"name": "_beforeRun",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 341,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 111,
									"name": "_beforeRun",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "CancellablePromise"
									},
									"overwrites": {
										"type": "reference",
										"name": "Executor._beforeRun"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Executor._beforeRun"
							}
						},
						{
							"id": 114,
							"name": "_createSessionSuites",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 453,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 115,
									"name": "_createSessionSuites",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates suites for each environment in which tests will be executed. This\nmethod will only be called if there are both environments and suites to\nrun."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 112,
							"name": "_createTunnel",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 414,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 113,
									"name": "_createTunnel",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "default"
									}
								}
							]
						},
						{
							"id": 294,
							"name": "_drainEventQueue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 854,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 295,
									"name": "_drainEventQueue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Emit any queued events. The event queue will be empty after this method\nruns."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "CancellablePromise"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor._drainEventQueue"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._drainEventQueue"
							}
						},
						{
							"id": 296,
							"name": "_emitCoverage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 865,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 297,
									"name": "_emitCoverage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 298,
											"name": "source",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "void"
													}
												],
												"name": "CancellablePromise"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor._emitCoverage"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._emitCoverage"
							}
						},
						{
							"id": 122,
							"name": "_getSeleniumDriverNames",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 890,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 123,
									"name": "_getSeleniumDriverNames",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Return the names of all the selenium drivers that should be needed based\non the environments specified in the config."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							]
						},
						{
							"id": 292,
							"name": "_initReporters",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 818,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 293,
									"name": "_initReporters",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Instantiate any configured built-in reporters"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "CancellablePromise"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor._initReporters"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._initReporters"
							}
						},
						{
							"id": 116,
							"name": "_loadFunctionalSuites",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 593,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 117,
									"name": "_loadFunctionalSuites",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Load functional test suites"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "CancellablePromise"
									}
								}
							]
						},
						{
							"id": 299,
							"name": "_loadLoader",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 879,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 300,
									"name": "_loadLoader",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Load a loader"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor._loadLoader"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._loadLoader"
							}
						},
						{
							"id": 303,
							"name": "_loadPlugins",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 935,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 304,
									"name": "_loadPlugins",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Load scripts in the `plugins` list using the platform's native loading\nmechanism"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "CancellablePromise"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor._loadPlugins"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._loadPlugins"
							}
						},
						{
							"id": 301,
							"name": "_loadPluginsWithLoader",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 923,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 302,
									"name": "_loadPluginsWithLoader",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Load scripts in the `requires` list using an external loader, if\nconfigured, or the platform's native loading mechanism"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "CancellablePromise"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor._loadPluginsWithLoader"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._loadPluginsWithLoader"
							}
						},
						{
							"id": 305,
							"name": "_loadScripts",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 947,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 306,
									"name": "_loadScripts",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Load a list of scripts using a given loader. These will be loaded\nsequentially in order."
									},
									"parameters": [
										{
											"id": 307,
											"name": "scripts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "PluginDescriptor"
												}
											}
										},
										{
											"id": 308,
											"name": "loader",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 309,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 310,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 311,
																	"name": "script",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "intrinsic",
																		"name": "void"
																	}
																],
																"name": "Promise"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "CancellablePromise"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor._loadScripts"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._loadScripts"
							}
						},
						{
							"id": 118,
							"name": "_loadSuites",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 619,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 119,
									"name": "_loadSuites",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Override Executor#_loadSuites to set instrumentation hooks before loading\nsuites"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "CancellablePromise"
									},
									"overwrites": {
										"type": "reference",
										"name": "Executor._loadSuites"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Executor._loadSuites"
							}
						},
						{
							"id": 312,
							"name": "_processOption",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 994,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 313,
									"name": "_processOption",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Process an option"
									},
									"parameters": [
										{
											"id": 314,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"id": 1018,
													"name": "Config"
												}
											}
										},
										{
											"id": 315,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor._processOption"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor._processOption"
							}
						},
						{
							"id": 130,
							"name": "_removeInstrumentationHooks",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 1027,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 131,
									"name": "_removeInstrumentationHooks",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Removes instrumentation hooks"
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 120,
							"name": "_resolveConfig",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 636,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 121,
									"name": "_resolveConfig",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "void"
													}
												]
											}
										],
										"name": "CancellablePromise"
									},
									"overwrites": {
										"type": "reference",
										"name": "Executor._resolveConfig"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Executor._resolveConfig"
							}
						},
						{
							"id": 126,
							"name": "_runRemoteTests",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 968,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 127,
									"name": "_runRemoteTests",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "CancellablePromise"
									}
								}
							]
						},
						{
							"id": 124,
							"name": "_runTests",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 920,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 125,
									"name": "_runTests",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "CancellablePromise"
									},
									"overwrites": {
										"type": "reference",
										"name": "Executor._runTests"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Executor._runTests"
							}
						},
						{
							"id": 128,
							"name": "_setInstrumentationHooks",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 1012,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 129,
									"name": "_setInstrumentationHooks",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds hooks for code coverage instrumentation in the Node.js loader."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 84,
							"name": "addSuite",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 213,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 85,
									"name": "addSuite",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Override Executor#addSuite to handle functional suites"
									},
									"parameters": [
										{
											"id": 86,
											"name": "factory",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 87,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 88,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 89,
																	"name": "parentSuite",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "default"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"overwrites": {
										"type": "reference",
										"name": "Executor.addSuite"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Executor.addSuite"
							}
						},
						{
							"id": 164,
							"name": "configure",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 240,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 165,
									"name": "configure",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Configure the executor with an object containing\n[[lib/executors/Executor.Config]] properties."
									},
									"parameters": [
										{
											"id": 166,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 167,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 168,
															"name": "bail",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "By default, Intern will run all configured tests. Setting this option\nto `true` will cause Intern to stop running tests after the first failure."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 18,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 170,
															"name": "basePath",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The path to the project base. This will always end with a path separator\n(e.g., /)."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 26,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 169,
															"name": "baseline",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 20,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 171,
															"name": "benchmark",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "This property must be set to `true` for benchmark tests to run. If it is\nunset or `false`, any suites registered using the benchmark interface will\nbe ignored."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 33,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 172,
															"name": "benchmarkConfig",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 35,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 173,
															"name": "browser",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 37,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 185,
															"name": "capabilities",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The default capabilities for all test environments.",
																"text": "They will be extended for each environment by values in the\n[`environments`](#environments) array.\n\nCloud testing services such as BrowserStack may have unique capabilities.\nItâ€™s important to use the proper capabilities for the WebDriver server or\ncloud service being used to run tests.\n\n* [Selenium capabilities](https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities)\n* [BrowserStack capabilities](https://www.browserstack.com/automate/capabilities)\n* [CrossBrowserTesting capabilities](https://help.crossbrowsertesting.com/selenium-testing/automation-capabilities)\n* [Sauce Labs capabilities](https://wiki.saucelabs.com/display/DOCS/Test+Configuration+Options#TestConfigurationOptions-Selenium-SpecificOptions) and [environments](https://saucelabs.com/platforms)\n* [TestingBot capabilities](https://testingbot.com/support/other/test-options) and [environments](https://testingbot.com/support/getting-started/browsers.html)\n\n[Chrome-specific options](https://sites.google.com/a/chromium.org/chromedriver/capabilities)\nmay be passed using a `goog:chromeOptions` capability.\n\n[Firefox-specific options](https://github.com/mozilla/geckodriver#firefox-capabilities)\nmay be passed using a `moz:firefoxOptions` capability.\n\nIntern will automatically provide certain capabilities to provide better\nfeedback with cloud service dashboards:\n\n* `name` will be set to the name of the test config\n* `build` will be set to the commit ID from the `TRAVIS_COMMIT` and\n  `BUILD_TAG` environment variables, if either exists\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 124,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 186,
															"name": "connectTimeout",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Time to wait for contact from a remote server"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 131,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 187,
															"name": "coverage",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "An array of file paths or globs that should be instrumented for code\ncoverage, or false to completely disable coverage.",
																"text": "This property should point to the actual JavaScript files that will be\nexecuted, not pre-transpiled sources (coverage results will still be\nmapped back to original sources). Coverage data will be collected for\nthese files even if theyâ€™re not loaded by Intern for tests, allowing a\ntest writer to see which files _havenâ€™t_ been tested, as well as coverage\non files that were tested.\n\nWhen this value is unset, Intern will still look for coverage data on a\nglobal coverage variable, and it will request coverage data from remote\nsessions. Explicitly setting coverage to false will prevent Intern from\neven checking for coverage data.\n\n> ðŸ’¡This property replaces the `excludeInstrumentation` property used in\nprevious versions of Intern, which acted as a filter rather than an\ninclusive list.\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 153,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 174,
															"name": "coverageVariable",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The global variable that will be used to store coverage data"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 42,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 175,
															"name": "debug",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "When set to true, Intern will emit 'log' events for many internal\noperations. Reporters that register for these events, such as the Runner\nreporter, will display them during testing."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 49,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 176,
															"name": "defaultTimeout",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "This is the number of milliseconds that Intern will wait for an\n[asynchronous test](https://github.com/theintern/intern/blob/master/docs/writing_tests.md#testing-asynchronous-code)\nto complete before timing out. A timed out test is considered to have\nfailed."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 57,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 177,
															"name": "description",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "A description for this test run"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 60,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 188,
															"name": "environments",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The environments that will be used to run tests.",
																"text": "Its value can be a single browser name or an environment object, or an\narray of these.\n\n```js\nenvironments: 'chrome'\nenvironments: ['chrome', 'firefox']\nenvironments: { browserName: 'chrome', version: '57.0' }\nenvironments: { browserName: 'chrome', fixSessionCapabilities: false }\n```\n\nThe syntax for browser names and other properties depends on where tests\nare being run. For example, when running tests using a local Selenium\nserver, the browser name should be the lowercase name of a locally\navailable browser, such as â€˜chromeâ€™ or â€˜firefoxâ€™, and other properties\nsuch as the platform name will generally be ignored. When running on a\ncloud testing service such as [Sauce Labs](https://wiki.saucelabs.com/display/DOCS/Test+Configuration+Options#TestConfigurationOptions-RequiredSeleniumTestConfigurationSettings)\nor [BrowserStack](https://www.browserstack.com/automate/capabilities),\nbrowser names and other properties may have different acceptable values\n(e.g., â€˜googlechromeâ€™ instead of â€˜chromeâ€™, or â€˜MacOSâ€™ vs â€˜OSXâ€™).\n\nThe [fixSessionCapabilities](https://theintern.io/docs.html#Leadfoot/2/api/Server/fixsessioncapabilities)\nproperty determines whether feature and defect tests will be run in the\nremote browser. Setting it to `false` entirely disables feature tests\n(assuming that all features are enabled), while setting it to\n`'no-detect'` will set certain already-known feature and defect flags\nbased on the browser and platform. The current set of capabilities are\navailable on `this.remote.session.capabilities` in functional tests.\n\n> ðŸ’¡Note that 'node' is an environment. If no environments are specified,\nthe Node executor will automatically add 'node' to the resolved config.\nIf any environments are specified, though, unit tests will only be run in\nthis environments.\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 191,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 189,
															"name": "excludeInstrumentation",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 194,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 178,
															"name": "filterErrorStack",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "If true, filter external library calls and runtime calls out of error\nstacks."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 66,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 190,
															"name": "functionalBaseUrl",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The base URL to use for relative addresses in functional tests"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 197,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 191,
															"name": "functionalCoverage",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether to collect coverage data from functional tests"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 200,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 192,
															"name": "functionalSuites",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "A list of paths or glob expressions that point to functional suites.",
																"text": "Functional suites are files that register\n[WebDriver tests](writing_tests.md).\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 208,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 193,
															"name": "functionalTimeouts",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Default timeout values for functional tests",
																"text": "  * **find** is the time to wait for findBy commands to find an element\n  * **executeAsync** is the time to wait for executeAsync calls to\n    complete\n  * **pageLoad** is the time to wait for a page to finish loading\n    synchronous resources\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 219,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 179,
															"name": "grep",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "This property is a regular expression that is used to filter which tests\nare run. Grep operates on test IDs. A test ID is the concatenation of a\ntest name with all of its parent suite names. Every test ID that matches\nthe current grep expression will be run."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 74,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 194,
															"name": "heartbeatInterval",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "How often to send a heartbeat message to a remote browser, in seconds"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 234,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 195,
															"name": "instrumenterOptions",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "An object containing options for the\n[Istanbul instrumenter](https://github.com/istanbuljs/istanbuljs/blob/master/packages/istanbul-lib-instrument/api.md#instrumenter)."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 240,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 180,
															"name": "internPath",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The path to Intern. This will always end with a path separator (e.g., /)."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 79,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 196,
															"name": "leaveRemoteOpen",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Whether to leave the remote browser open after testing.",
																"text": "Normally when Intern runs tests on remote browsers, it shuts the browser\ndown when testing is finished. However, you may sometimes want to inspect\nthe state of a remote browser after tests have run, particularly if\nyou're trying to debug why a test is failing. Setting `leaveRemoteOpen`\nto true will cause Intern to leave the browser open after testing.\nSetting it to `'fail'` will cause Intern to leave it open only if there\nwere test failures.\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 253,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 210,
															"name": "loader",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The loader used to load test suites and application modules.",
																"text": "When passed in as part of a config object, the `loader` property can be a\nstring with a loader name or the path to a loader script. It may also be\nan object with `script` and `config` properties. Intern provides built-in\nloader scripts for Dojo and Dojo2, which can be specified with the IDs\n'dojo' and 'dojo2'.\n\n```ts\nloader: 'dojo2'\nloader: 'tests/loader.js'\nloader: {\n    script: 'dojo',\n    config: {\n        packages: [\n            { name: 'app', location: './js' }\n        ]\n    }\n}\n```\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 426,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 197,
															"name": "maxConcurrency",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The number of concurrent remote test sessions to run at once.",
																"text": "The default value is Infinity, meaning Intern will try to run all of its\ntest sessions in parallel. Note that cloud testing services often limit\nthe number of concurrent sessions they will allow to 2 or 5.\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 262,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 181,
															"name": "name",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "A top-level name for this configuration."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 82,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 182,
															"name": "node",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 84,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 212,
															"name": "plugins",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "A list of scripts or modules to load before suites are loaded."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 470,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 198,
															"name": "proxy",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "A proxy that should be used for outgoing web connections. If specified,\nthis will be used for Intern's WebDriver client instead of the Dig Dug\ntunnel's proxy value."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 269,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 199,
															"name": "remoteOptions",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Options to pass to the remote runner."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 274,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 211,
															"name": "reporters",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "A list of reporter names or descriptors.",
																"text": "Reporters specified in this list must have been previously installed\nusing\n[`registerReporter`](https://theintern.io/docs.html#Intern/4/api/lib%2Fexecutors%2FExecutor/registerreporter)\nor\n[`registerPlugin`](https://theintern.io/docs.html#Intern/4/api/lib%2Fexecutors%2FExecutor/registerplugin).\n\nList entries may be reporter names or objects of the format\n\n```js\n{\n    name: 'reporter name',\n    options: {\n        // reporter-specific options\n    }\n}\n```\n\nThe built-in reporters under Node are:\n  * benchmark - output benchmark test results\n  * cobertura - output coverage data in the cobertura format\n  * htmlcoverage - output coverage data as an HTML report\n  * jsoncoverage - output coverage data in a JSON format\n  * junit - output results in JUnit format\n  * lcov - output coverage results in lcov format\n  * pretty - draw text results in a terminal\n  * runner - output test results as formatted text (default Node reporter)\n  * simple - output test results as simple text\n  * teamcity - output results in TeamCity format\n\nThe built-in reporters available in browsers are:\n  * console - output to the browser console\n  * dom - output results as text in the DOM\n  * html - output a pretty HTML report (default browser reporter)\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 465,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 215,
															"name": "require",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 497,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 216,
															"name": "requires",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 498,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 200,
															"name": "runInSync",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "If true, a remote will wait for reponses from Intern for any executor\nevents."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 280,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 217,
															"name": "scripts",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 499,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 201,
															"name": "serveOnly",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "If true, start Intern's static test server but do not run any tests."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 283,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 202,
															"name": "serverPort",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The port Intern's static server will listen on during functional tests."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 288,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 203,
															"name": "serverUrl",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The URL a remote should use to access Intern's static server. By default\nthis is http://localhost:9000, but the domain or port may be different if\nIntern is behind a proxy."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 295,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 183,
															"name": "sessionId",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "An identifier for this test session. By default it will have the value\n''."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 90,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 184,
															"name": "showConfig",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "If true, display the resolved config and exit"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 93,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 204,
															"name": "socketPort",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The port that a remote will use to access Intern's websocket server. The\nhostname will be the same as for serverUrl. For example, if serverPort is\nset to 9001 and the default serverUrl is used (http://localhost:9000),\nthe full websocket URL will be ws://localhost:9001."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 303,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 205,
															"name": "socketTimeout",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The number of milliseconds to wait before a websocket message is considered\nto be timed out."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 309,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 213,
															"name": "suites",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "A list of paths or glob expressions that point to suite scripts.",
																"text": "```js\n{\n    suites: [\n        'tests/unit/**\\/*.js',\n        'tests/intergration/request.js'\n    ]\n}\n```\n\nNote that using globs with the browser client requires that Intern's\nserver be used to serve the tests. The server can be run in standalone\nmode by setting the `serveOnly` option.\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 488,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 214,
															"name": "tsconfig",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "An optional path to a tsconfig for ts-node, or false if TypeScript\nsupport is not needed. This option can be used if tests need to use a\ndifferent tsconfig than the project uses normally."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 495,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 206,
															"name": "tunnel",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "The Dig Dug tunnel class to use for WebDriver testing.",
																"text": "There are several built in tunnel types, and others can be added through\nthe Node executorâ€™s [`registerPlugin`\nmethod](./architecture.md#extension-points).\n\nThe built in tunnel classes are:\n\n* 'null'\n* 'selenium'\n* 'browserstack'\n* 'cbt' (CrossBrowserTesting)\n* 'saucelabs'\n* 'testingbot'\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 327,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 207,
															"name": "tunnelOptions",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Options for the currently selected tunnel.",
																"text": "The available options depend on the current tunnel. Common options\ninclude:\n\n** All tunnels**\n\n| Property   | Value                                                    |\n| :---       | :---                                                     |\n| `username` | Username for the tunnel service (e.g., BrowserStack)     |\n| `apiKey`   | API key for the tunnel service (e.g., BrowserStack)      |\n| `pathname` | The path for the tunnelâ€™s REST endpoint (e.g., `wd/hub`) |\n\n**Selenium tunnel**\n\n| Property  | Value                                                                   |\n| :---      | :---                                                                    |\n| `drivers` | A list of driver names, or objects with `name` and `options` properties |\n| `verbose` | If true, show tunnel debug information                                  |\n\nSee also:\n\n* [[https://theintern.io/docs.html#Dig%20Dug/2/api/Tunnel/tunnelproperties|Tunnel]]\n* [[https://theintern.io/docs.html#Dig%20Dug/2/api/SeleniumTunnel/seleniumproperties|SeleniumTunnel]]\n* [[https://theintern.io/docs.html#Dig%20Dug/2/api/BrowserStackTunnel/browserstackproperties|BrowserStackTunnel]]\n"
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 356,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 209,
															"name": "warnOnUncaughtException",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "By default, an Intern session will fail if the Executor catches a\nbrowser-level unhandled error. This setting allows unhandled errors to be\ntreated as warnings instead of failing errors. If this setting is true or\nset to a RegExp that matches an unhandled error, Intern will emit a warning\nrather than failing the test run."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 374,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														},
														{
															"id": 208,
															"name": "warnOnUnhandledRejection",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "By default, an Intern session will fail if the Executor catches a\nbrowser-level unhandled Promise rejection. This setting allows unhandled\nrejections to be treated as warnings instead of failing errors. If this\nsetting is true or set to a RegExp that matches the reason for an unhandled\nrejection, Intern will emit a warning rather than failing the test run."
															},
															"sources": [
																{
																	"fileName": "src/lib/common/config.ts",
																	"line": 365,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																168,
																170,
																169,
																171,
																172,
																173,
																185,
																186,
																187,
																174,
																175,
																176,
																177,
																188,
																189,
																178,
																190,
																191,
																192,
																193,
																179,
																194,
																195,
																180,
																196,
																210,
																197,
																181,
																182,
																212,
																198,
																199,
																211,
																215,
																216,
																200,
																217,
																201,
																202,
																203,
																183,
																184,
																204,
																205,
																213,
																214,
																206,
																207,
																209,
																208
															]
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.configure"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor.configure"
							}
						},
						{
							"id": 218,
							"name": "emit",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 257,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 219,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Emit an event to all registered listeners.",
										"text": "Event listeners may execute async code, and a failing handler (one that\nrejects or throws an error) will cause the emit to fail.\n",
										"returns": "a CancellablePromise that resolves when all listeners have processed the event\n"
									},
									"typeParameter": [
										{
											"id": 220,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "NoDataEvents"
											}
										}
									],
									"parameters": [
										{
											"id": 221,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the name of the event to emit"
											},
											"type": {
												"type": "reference",
												"name": "T"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "CancellablePromise"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.emit"
									}
								},
								{
									"id": 222,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 223,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"id": 731,
													"name": "NodeEvents"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 224,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "T"
											}
										},
										{
											"id": 225,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "indexedAccess",
												"indexType": {
													"type": "reference",
													"name": "T"
												},
												"objectType": {
													"type": "reference",
													"id": 731,
													"name": "NodeEvents"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "CancellablePromise"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.emit"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor.emit"
							}
						},
						{
							"id": 160,
							"name": "formatError",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 190,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 161,
									"name": "formatError",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Format an error, normalizing the stack trace and resolving source map\nreferences"
									},
									"parameters": [
										{
											"id": 162,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Error"
											}
										},
										{
											"id": 163,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "ErrorFormatOptions"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.formatError"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor.formatError"
							}
						},
						{
							"id": 226,
							"name": "getInterface",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 354,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 227,
									"name": "getInterface",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a registered interface plugin.",
										"text": "This method calls `getPlugin` behind the scenes.\n",
										"returns": "the interface, which may be an object or a callable function, or\nundefined if no such interface was registered.\n"
									},
									"parameters": [
										{
											"id": 228,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the name of the interface"
											},
											"type": {
												"type": "literal",
												"value": "object"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ObjectInterface"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.getInterface"
									}
								},
								{
									"id": 229,
									"name": "getInterface",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 230,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "literal",
												"value": "tdd"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TddInterface"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.getInterface"
									}
								},
								{
									"id": 231,
									"name": "getInterface",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 232,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "literal",
												"value": "bdd"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BddInterface"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.getInterface"
									}
								},
								{
									"id": 233,
									"name": "getInterface",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 234,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "literal",
												"value": "benchmark"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BenchmarkInterface"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.getInterface"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor.getInterface"
							}
						},
						{
							"id": 235,
							"name": "getPlugin",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 370,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 236,
									"name": "getPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get any resources registered by a particular plugin.",
										"returns": "the resource registered for the given plugin name, or undefined\nif no such plugin was registered.\n"
									},
									"typeParameter": [
										{
											"id": 237,
											"name": "Y",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"id": 316,
													"name": "NodePlugins"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 238,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the type of plugin (e.g., 'interface' or 'reporter')"
											},
											"type": {
												"type": "reference",
												"name": "Y"
											}
										},
										{
											"id": 239,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the name of the plugin"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "indexedAccess",
										"indexType": {
											"type": "reference",
											"name": "Y"
										},
										"objectType": {
											"type": "reference",
											"id": 316,
											"name": "NodePlugins"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.getPlugin"
									}
								},
								{
									"id": 240,
									"name": "getPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 241,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "literal",
												"value": "chai"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ChaiStatic"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.getPlugin"
									}
								},
								{
									"id": 242,
									"name": "getPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 243,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "literal",
												"value": "interface.object"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ObjectInterface"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.getPlugin"
									}
								},
								{
									"id": 244,
									"name": "getPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 245,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "literal",
												"value": "interface.tdd"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TddInterface"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.getPlugin"
									}
								},
								{
									"id": 246,
									"name": "getPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 247,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "literal",
												"value": "interface.bdd"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BddInterface"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.getPlugin"
									}
								},
								{
									"id": 248,
									"name": "getPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 249,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "literal",
												"value": "interface.benchmark"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BenchmarkInterface"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.getPlugin"
									}
								},
								{
									"id": 250,
									"name": "getPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 251,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 252,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "T"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.getPlugin"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor.getPlugin"
							}
						},
						{
							"id": 90,
							"name": "getTunnel",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 224,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 91,
									"name": "getTunnel",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retrieve a registered tunnel constructor"
									},
									"parameters": [
										{
											"id": 92,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "query",
										"queryType": {
											"type": "reference",
											"name": "default"
										}
									}
								}
							]
						},
						{
							"id": 93,
							"name": "instrumentCode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 231,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 94,
									"name": "instrumentCode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Insert coverage instrumentation into a given code string"
									},
									"parameters": [
										{
											"id": 95,
											"name": "code",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 96,
											"name": "filename",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 97,
											"name": "shouldCompile",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							]
						},
						{
							"id": 98,
							"name": "loadScript",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 274,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 99,
									"name": "loadScript",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Load scripts using Node's require"
									},
									"parameters": [
										{
											"id": 100,
											"name": "script",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "CancellablePromise"
									},
									"overwrites": {
										"type": "reference",
										"name": "Executor.loadScript"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Executor.loadScript"
							}
						},
						{
							"id": 253,
							"name": "log",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 398,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 254,
									"name": "log",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This is a convenience method for emitting log events.",
										"text": "When debug mode is enabled, this method emits 'log' events using `emit`.\nOtherwise it does nothing.\n",
										"returns": "a CancellablePromise that resolves when all listeners have finished processing\nthe event.\n"
									},
									"parameters": [
										{
											"id": 255,
											"name": "args",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "A list of arguments that will be stringified and combined\ninto a space-separated message."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "CancellablePromise"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.log"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor.log"
							}
						},
						{
							"id": 256,
							"name": "on",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 457,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 257,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Add a listener for a test event.",
										"text": "```js\nintern.on('error', error => {\n    console.log('An error occurred:', error);\n});\n```\n\nA listener can be notified of all events by registering for the '*'\nevent, or by calling on with only a callback:\n\n```js\nintern.on(event => {\n    console.log(`An ${event.name} event occurred:`, event.data);\n});\n```\nNote that some events are executor-specific. For example, the\n[[lib/executors/Browser]] executor will never emit a tunnelStop\nmessage.\n",
										"returns": "a handle with a `destroy` method that can be used to stop\nlistening\n"
									},
									"typeParameter": [
										{
											"id": 258,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"id": 731,
													"name": "NodeEvents"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 259,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the [[lib/executors/Executor.Events|event]] to listen\nfor"
											},
											"type": {
												"type": "reference",
												"name": "T"
											}
										},
										{
											"id": 260,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "a callback that accepts a single data parameter; it may\nreturn a PromiseLike object if it needs to perform async actions"
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "indexedAccess",
														"indexType": {
															"type": "reference",
															"name": "T"
														},
														"objectType": {
															"type": "reference",
															"id": 731,
															"name": "NodeEvents"
														}
													}
												],
												"name": "Listener"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Handle"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.on"
									}
								},
								{
									"id": 261,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 262,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reflection",
														"declaration": {
															"id": 263,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 265,
																	"name": "data",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {
																		"isOptional": true
																	},
																	"sources": [
																		{
																			"fileName": "src/lib/executors/Executor.ts",
																			"line": 458,
																			"character": 40
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																},
																{
																	"id": 264,
																	"name": "name",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "src/lib/executors/Executor.ts",
																			"line": 458,
																			"character": 26
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"kind": 1024,
																	"children": [
																		265,
																		264
																	]
																}
															]
														}
													}
												],
												"name": "Listener"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Handle"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.on"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor.on"
							}
						},
						{
							"id": 266,
							"name": "registerInterface",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 495,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 267,
									"name": "registerInterface",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register an interface plugin",
										"text": "This is a convenience method for registering test interfaces. This method\ncalls [[lib/executors/Executor.Executor.registerPlugin]] behind the\nscenes using the name `interface.${name}`.\n"
									},
									"parameters": [
										{
											"id": 268,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 269,
											"name": "iface",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.registerInterface"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor.registerInterface"
							}
						},
						{
							"id": 270,
							"name": "registerLoader",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 524,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 271,
									"name": "registerLoader",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register a module loader.",
										"text": "This method sets the loader script that will be used to load plugins and\nsuites. The callback should accept an options object and return a\nfunction that can load modules.\n\n```js\nintern.registerLoader(options: any => {\n    // Register loader can return a Promise if it needs to load something\n    // itself\n    return intern.loadScript('some/loader.js').then(() => {\n        loader.config(options);\n        // Return a function that takes a list of modules and returns a\n        // Promise that resolves when they've been loaded.\n        return (modules: string[]) => {\n            return loader.load(modules);\n        });\n    });\n});\n```\n"
									},
									"parameters": [
										{
											"id": 272,
											"name": "init",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "a loader initialzation callback that should return a loader\nfunction, or a Promise that resolves to a loader function\n"
											},
											"type": {
												"type": "reference",
												"name": "LoaderInit"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.registerLoader"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor.registerLoader"
							}
						},
						{
							"id": 273,
							"name": "registerPlugin",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 565,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 274,
									"name": "registerPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register a plugin.",
										"text": "Plugins are resources that are loaded at the beginning of the testing\nprocess, after the loader but before any suites are registered. The\ncallback may return a Promise if the plugin needs to do some asynchronous\ninitialization. If the plugin is being loaded via the\n[[lib/executors/Executor.Config.plugins|config.plugins]]\nproperty, it's init callback will be passed any configured options. The\nresolved return value of the callback will be returned by\n[[lib/executors/Executor.Executor.getPlugin]].\n\n```js\nintern.registerPlugin('foo', (options: any) => {\n    return {\n        doSomething() {\n            // ...\n        },\n        doSomethingElse() {\n            // ...\n        }\n    };\n});\n```\n\nCode would use the plugin by calling getPlugin:\n\n```js\nconst { doSomething, doSomethingElse } = intern.getPlugin('foo');\ndoSomething();\n```\n"
									},
									"typeParameter": [
										{
											"id": 275,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"id": 316,
													"name": "NodePlugins"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 276,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "T"
											}
										},
										{
											"id": 277,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the plugin name"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 278,
											"name": "init",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "an initializer function that returns the plugin resource, or\na Promise that resolves to the resource\n"
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "indexedAccess",
														"indexType": {
															"type": "reference",
															"name": "T"
														},
														"objectType": {
															"type": "reference",
															"id": 316,
															"name": "NodePlugins"
														}
													}
												],
												"name": "PluginInitializer"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.registerPlugin"
									}
								},
								{
									"id": 279,
									"name": "registerPlugin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 280,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 281,
											"name": "init",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "PluginInitializer"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.registerPlugin"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor.registerPlugin"
							}
						},
						{
							"id": 282,
							"name": "registerReporter",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 609,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 283,
									"name": "registerReporter",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register a reporter plugin",
										"text": "This is a convenience method for registering reporter constructors. This\nmethod calls [[lib/executors/Executor.Executor.registerPlugin]] behind\nthe scenes using the name `reporter.${name}`.\n"
									},
									"parameters": [
										{
											"id": 284,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the reporter name"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 285,
											"name": "init",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReporterInitializer"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.registerReporter"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor.registerReporter"
							}
						},
						{
							"id": 101,
							"name": "registerTunnel",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 299,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 102,
									"name": "registerTunnel",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register a tunnel constructor with the plugin system. It can be retrieved\nlater with getTunnel or getPlugin."
									},
									"parameters": [
										{
											"id": 103,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 104,
											"name": "Ctor",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "query",
												"queryType": {
													"type": "reference",
													"name": "default"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 286,
							"name": "run",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 619,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 287,
									"name": "run",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Run tests.",
										"text": "This method sets up the environment for test execution, runs the tests,\nand runs any finalization code afterwards.\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "CancellablePromise"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Executor.run"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Executor.run"
							}
						},
						{
							"id": 105,
							"name": "shouldInstrumentFile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 307,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 106,
									"name": "shouldInstrumentFile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Return true if a given file should be instrumented based on the current\nconfig"
									},
									"parameters": [
										{
											"id": 107,
											"name": "filename",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								5
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								132,
								62,
								61,
								135,
								134,
								138,
								136,
								137,
								64,
								67,
								65,
								147,
								139,
								141,
								140,
								63,
								146,
								142,
								151,
								155,
								157,
								133,
								156,
								71,
								66,
								68,
								59,
								60
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								158,
								72,
								74,
								80,
								76,
								78,
								82
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								108,
								288,
								110,
								114,
								112,
								294,
								296,
								122,
								292,
								116,
								299,
								303,
								301,
								305,
								118,
								312,
								130,
								120,
								126,
								124,
								128,
								84,
								164,
								218,
								160,
								226,
								235,
								90,
								93,
								98,
								253,
								256,
								266,
								270,
								273,
								282,
								101,
								286,
								105
							]
						}
					],
					"sources": [
						{
							"fileName": "src/lib/executors/Node.ts",
							"line": 59,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"typeArguments": [
								{
									"type": "reference",
									"id": 731,
									"name": "NodeEvents"
								},
								{
									"type": "reference",
									"id": 1018,
									"name": "Config"
								},
								{
									"type": "reference",
									"id": 316,
									"name": "NodePlugins"
								}
							],
							"name": "Executor"
						}
					]
				},
				{
					"id": 1018,
					"name": "Config",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This interface describes the configuration data used by Intern. Its\nproperties can be set from the command line when running the intern bin\nscript, or via an object passed to the executor's\n[[lib/executors/Executor.Executor.configure]] method."
					},
					"children": [
						{
							"id": 1019,
							"name": "bail",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "By default, Intern will run all configured tests. Setting this option\nto `true` will cause Intern to stop running tests after the first failure."
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 18,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 1021,
							"name": "basePath",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The path to the project base. This will always end with a path separator\n(e.g., /)."
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 26,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1020,
							"name": "baseline",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 20,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 1022,
							"name": "benchmark",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "This property must be set to `true` for benchmark tests to run. If it is\nunset or `false`, any suites registered using the benchmark interface will\nbe ignored."
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 33,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 1023,
							"name": "benchmarkConfig",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 35,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "BenchmarkConfig"
							}
						},
						{
							"id": 1024,
							"name": "browser",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 37,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "ResourceConfig"
							}
						},
						{
							"id": 1036,
							"name": "capabilities",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The default capabilities for all test environments.",
								"text": "They will be extended for each environment by values in the\n[`environments`](#environments) array.\n\nCloud testing services such as BrowserStack may have unique capabilities.\nItâ€™s important to use the proper capabilities for the WebDriver server or\ncloud service being used to run tests.\n\n* [Selenium capabilities](https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities)\n* [BrowserStack capabilities](https://www.browserstack.com/automate/capabilities)\n* [CrossBrowserTesting capabilities](https://help.crossbrowsertesting.com/selenium-testing/automation-capabilities)\n* [Sauce Labs capabilities](https://wiki.saucelabs.com/display/DOCS/Test+Configuration+Options#TestConfigurationOptions-Selenium-SpecificOptions) and [environments](https://saucelabs.com/platforms)\n* [TestingBot capabilities](https://testingbot.com/support/other/test-options) and [environments](https://testingbot.com/support/getting-started/browsers.html)\n\n[Chrome-specific options](https://sites.google.com/a/chromium.org/chromedriver/capabilities)\nmay be passed using a `goog:chromeOptions` capability.\n\n[Firefox-specific options](https://github.com/mozilla/geckodriver#firefox-capabilities)\nmay be passed using a `moz:firefoxOptions` capability.\n\nIntern will automatically provide certain capabilities to provide better\nfeedback with cloud service dashboards:\n\n* `name` will be set to the name of the test config\n* `build` will be set to the commit ID from the `TRAVIS_COMMIT` and\n  `BUILD_TAG` environment variables, if either exists\n"
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 124,
									"character": 2
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1037,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 1039,
											"name": "build",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/lib/common/config.ts",
													"line": 126,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1038,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/lib/common/config.ts",
													"line": 125,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1039,
												1038
											]
										}
									],
									"indexSignature": {
										"id": 1040,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 1041,
												"name": "key",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							}
						},
						{
							"id": 1042,
							"name": "connectTimeout",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Time to wait for contact from a remote server"
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 131,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1043,
							"name": "coverage",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "An array of file paths or globs that should be instrumented for code\ncoverage, or false to completely disable coverage.",
								"text": "This property should point to the actual JavaScript files that will be\nexecuted, not pre-transpiled sources (coverage results will still be\nmapped back to original sources). Coverage data will be collected for\nthese files even if theyâ€™re not loaded by Intern for tests, allowing a\ntest writer to see which files _havenâ€™t_ been tested, as well as coverage\non files that were tested.\n\nWhen this value is unset, Intern will still look for coverage data on a\nglobal coverage variable, and it will request coverage data from remote\nsessions. Explicitly setting coverage to false will prevent Intern from\neven checking for coverage data.\n\n> ðŸ’¡This property replaces the `excludeInstrumentation` property used in\nprevious versions of Intern, which acted as a filter rather than an\ninclusive list.\n"
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 153,
									"character": 2
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": false
									},
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						},
						{
							"id": 1025,
							"name": "coverageVariable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The global variable that will be used to store coverage data"
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 42,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1026,
							"name": "debug",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "When set to true, Intern will emit 'log' events for many internal\noperations. Reporters that register for these events, such as the Runner\nreporter, will display them during testing."
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 49,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 1027,
							"name": "defaultTimeout",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "This is the number of milliseconds that Intern will wait for an\n[asynchronous test](https://github.com/theintern/intern/blob/master/docs/writing_tests.md#testing-asynchronous-code)\nto complete before timing out. A timed out test is considered to have\nfailed."
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 57,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1028,
							"name": "description",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "A description for this test run"
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 60,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1044,
							"name": "environments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The environments that will be used to run tests.",
								"text": "Its value can be a single browser name or an environment object, or an\narray of these.\n\n```js\nenvironments: 'chrome'\nenvironments: ['chrome', 'firefox']\nenvironments: { browserName: 'chrome', version: '57.0' }\nenvironments: { browserName: 'chrome', fixSessionCapabilities: false }\n```\n\nThe syntax for browser names and other properties depends on where tests\nare being run. For example, when running tests using a local Selenium\nserver, the browser name should be the lowercase name of a locally\navailable browser, such as â€˜chromeâ€™ or â€˜firefoxâ€™, and other properties\nsuch as the platform name will generally be ignored. When running on a\ncloud testing service such as [Sauce Labs](https://wiki.saucelabs.com/display/DOCS/Test+Configuration+Options#TestConfigurationOptions-RequiredSeleniumTestConfigurationSettings)\nor [BrowserStack](https://www.browserstack.com/automate/capabilities),\nbrowser names and other properties may have different acceptable values\n(e.g., â€˜googlechromeâ€™ instead of â€˜chromeâ€™, or â€˜MacOSâ€™ vs â€˜OSXâ€™).\n\nThe [fixSessionCapabilities](https://theintern.io/docs.html#Leadfoot/2/api/Server/fixsessioncapabilities)\nproperty determines whether feature and defect tests will be run in the\nremote browser. Setting it to `false` entirely disables feature tests\n(assuming that all features are enabled), while setting it to\n`'no-detect'` will set certain already-known feature and defect flags\nbased on the browser and platform. The current set of capabilities are\navailable on `this.remote.session.capabilities` in functional tests.\n\n> ðŸ’¡Note that 'node' is an environment. If no environments are specified,\nthe Node executor will automatically add 'node' to the resolved config.\nIf any environments are specified, though, unit tests will only be run in\nthis environments.\n"
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 191,
									"character": 2
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 1082,
									"name": "EnvironmentSpec"
								}
							}
						},
						{
							"id": 1045,
							"name": "excludeInstrumentation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 194,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "never"
							}
						},
						{
							"id": 1029,
							"name": "filterErrorStack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "If true, filter external library calls and runtime calls out of error\nstacks."
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 66,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 1046,
							"name": "functionalBaseUrl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The base URL to use for relative addresses in functional tests"
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 197,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1047,
							"name": "functionalCoverage",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Whether to collect coverage data from functional tests"
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 200,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 1048,
							"name": "functionalSuites",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "A list of paths or glob expressions that point to functional suites.",
								"text": "Functional suites are files that register\n[WebDriver tests](writing_tests.md).\n"
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 208,
									"character": 2
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 1049,
							"name": "functionalTimeouts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Default timeout values for functional tests",
								"text": "  * **find** is the time to wait for findBy commands to find an element\n  * **executeAsync** is the time to wait for executeAsync calls to\n    complete\n  * **pageLoad** is the time to wait for a page to finish loading\n    synchronous resources\n"
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 219,
									"character": 2
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1050,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 1051,
											"name": "connectTimeout",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/lib/common/config.ts",
													"line": 221,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "undefined"
											}
										},
										{
											"id": 1053,
											"name": "executeAsync",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Time to wait for an executeAsync to complete"
											},
											"sources": [
												{
													"fileName": "src/lib/common/config.ts",
													"line": 227,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1052,
											"name": "find",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Time to wait for a findBy command to find a matching element"
											},
											"sources": [
												{
													"fileName": "src/lib/common/config.ts",
													"line": 224,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1054,
											"name": "pageLoad",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Time to wait for initial page load to complete"
											},
											"sources": [
												{
													"fileName": "src/lib/common/config.ts",
													"line": 230,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1051,
												1053,
												1052,
												1054
											]
										}
									]
								}
							}
						},
						{
							"id": 1030,
							"name": "grep",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "This property is a regular expression that is used to filter which tests\nare run. Grep operates on test IDs. A test ID is the concatenation of a\ntest name with all of its parent suite names. Every test ID that matches\nthe current grep expression will be run."
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 74,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "RegExp"
							}
						},
						{
							"id": 1055,
							"name": "heartbeatInterval",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "How often to send a heartbeat message to a remote browser, in seconds"
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 234,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1056,
							"name": "instrumenterOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "An object containing options for the\n[Istanbul instrumenter](https://github.com/istanbuljs/istanbuljs/blob/master/packages/istanbul-lib-instrument/api.md#instrumenter)."
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 240,
									"character": 2
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1057,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": {
										"id": 1058,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 1059,
												"name": "key",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							}
						},
						{
							"id": 1031,
							"name": "internPath",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The path to Intern. This will always end with a path separator (e.g., /)."
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 79,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1060,
							"name": "leaveRemoteOpen",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Whether to leave the remote browser open after testing.",
								"text": "Normally when Intern runs tests on remote browsers, it shuts the browser\ndown when testing is finished. However, you may sometimes want to inspect\nthe state of a remote browser after tests have run, particularly if\nyou're trying to debug why a test is failing. Setting `leaveRemoteOpen`\nto true will cause Intern to leave the browser open after testing.\nSetting it to `'fail'` will cause Intern to leave it open only if there\nwere test failures.\n"
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 253,
									"character": 2
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "literal",
										"value": "fail"
									}
								]
							}
						},
						{
							"id": 1074,
							"name": "loader",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The loader used to load test suites and application modules.",
								"text": "When passed in as part of a config object, the `loader` property can be a\nstring with a loader name or the path to a loader script. It may also be\nan object with `script` and `config` properties. Intern provides built-in\nloader scripts for Dojo and Dojo2, which can be specified with the IDs\n'dojo' and 'dojo2'.\n\n```ts\nloader: 'dojo2'\nloader: 'tests/loader.js'\nloader: {\n    script: 'dojo',\n    config: {\n        packages: [\n            { name: 'app', location: './js' }\n        ]\n    }\n}\n```\n"
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 426,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "LoaderDescriptor"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ResourceConfig.loader"
							}
						},
						{
							"id": 1061,
							"name": "maxConcurrency",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The number of concurrent remote test sessions to run at once.",
								"text": "The default value is Infinity, meaning Intern will try to run all of its\ntest sessions in parallel. Note that cloud testing services often limit\nthe number of concurrent sessions they will allow to 2 or 5.\n"
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 262,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1032,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "A top-level name for this configuration."
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 82,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1033,
							"name": "node",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 84,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "ResourceConfig"
							}
						},
						{
							"id": 1076,
							"name": "plugins",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "A list of scripts or modules to load before suites are loaded."
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 470,
									"character": 2
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "PluginDescriptor"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ResourceConfig.plugins"
							}
						},
						{
							"id": 1062,
							"name": "proxy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "A proxy that should be used for outgoing web connections. If specified,\nthis will be used for Intern's WebDriver client instead of the Dig Dug\ntunnel's proxy value."
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 269,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1063,
							"name": "remoteOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Options to pass to the remote runner."
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 274,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "RemoteOptions"
							}
						},
						{
							"id": 1075,
							"name": "reporters",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "A list of reporter names or descriptors.",
								"text": "Reporters specified in this list must have been previously installed\nusing\n[`registerReporter`](https://theintern.io/docs.html#Intern/4/api/lib%2Fexecutors%2FExecutor/registerreporter)\nor\n[`registerPlugin`](https://theintern.io/docs.html#Intern/4/api/lib%2Fexecutors%2FExecutor/registerplugin).\n\nList entries may be reporter names or objects of the format\n\n```js\n{\n    name: 'reporter name',\n    options: {\n        // reporter-specific options\n    }\n}\n```\n\nThe built-in reporters under Node are:\n  * benchmark - output benchmark test results\n  * cobertura - output coverage data in the cobertura format\n  * htmlcoverage - output coverage data as an HTML report\n  * jsoncoverage - output coverage data in a JSON format\n  * junit - output results in JUnit format\n  * lcov - output coverage results in lcov format\n  * pretty - draw text results in a terminal\n  * runner - output test results as formatted text (default Node reporter)\n  * simple - output test results as simple text\n  * teamcity - output results in TeamCity format\n\nThe built-in reporters available in browsers are:\n  * console - output to the browser console\n  * dom - output results as text in the DOM\n  * html - output a pretty HTML report (default browser reporter)\n"
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 465,
									"character": 2
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "ReporterDescriptor"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ResourceConfig.reporters"
							}
						},
						{
							"id": 1079,
							"name": "require",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 497,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "never"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ResourceConfig.require"
							}
						},
						{
							"id": 1080,
							"name": "requires",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 498,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "never"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ResourceConfig.requires"
							}
						},
						{
							"id": 1064,
							"name": "runInSync",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "If true, a remote will wait for reponses from Intern for any executor\nevents."
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 280,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 1081,
							"name": "scripts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 499,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "never"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ResourceConfig.scripts"
							}
						},
						{
							"id": 1065,
							"name": "serveOnly",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "If true, start Intern's static test server but do not run any tests."
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 283,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 1066,
							"name": "serverPort",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The port Intern's static server will listen on during functional tests."
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 288,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1067,
							"name": "serverUrl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The URL a remote should use to access Intern's static server. By default\nthis is http://localhost:9000, but the domain or port may be different if\nIntern is behind a proxy."
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 295,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1034,
							"name": "sessionId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "An identifier for this test session. By default it will have the value\n''."
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 90,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1035,
							"name": "showConfig",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "If true, display the resolved config and exit"
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 93,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 1068,
							"name": "socketPort",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The port that a remote will use to access Intern's websocket server. The\nhostname will be the same as for serverUrl. For example, if serverPort is\nset to 9001 and the default serverUrl is used (http://localhost:9000),\nthe full websocket URL will be ws://localhost:9001."
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 303,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1069,
							"name": "socketTimeout",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The number of milliseconds to wait before a websocket message is considered\nto be timed out."
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 309,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1077,
							"name": "suites",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "A list of paths or glob expressions that point to suite scripts.",
								"text": "```js\n{\n    suites: [\n        'tests/unit/**\\/*.js',\n        'tests/intergration/request.js'\n    ]\n}\n```\n\nNote that using globs with the browser client requires that Intern's\nserver be used to serve the tests. The server can be run in standalone\nmode by setting the `serveOnly` option.\n"
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 488,
									"character": 2
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ResourceConfig.suites"
							}
						},
						{
							"id": 1078,
							"name": "tsconfig",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "An optional path to a tsconfig for ts-node, or false if TypeScript\nsupport is not needed. This option can be used if tests need to use a\ndifferent tsconfig than the project uses normally."
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 495,
									"character": 2
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "literal",
										"value": false
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ResourceConfig.tsconfig"
							}
						},
						{
							"id": 1070,
							"name": "tunnel",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The Dig Dug tunnel class to use for WebDriver testing.",
								"text": "There are several built in tunnel types, and others can be added through\nthe Node executorâ€™s [`registerPlugin`\nmethod](./architecture.md#extension-points).\n\nThe built in tunnel classes are:\n\n* 'null'\n* 'selenium'\n* 'browserstack'\n* 'cbt' (CrossBrowserTesting)\n* 'saucelabs'\n* 'testingbot'\n"
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 327,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1071,
							"name": "tunnelOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Options for the currently selected tunnel.",
								"text": "The available options depend on the current tunnel. Common options\ninclude:\n\n** All tunnels**\n\n| Property   | Value                                                    |\n| :---       | :---                                                     |\n| `username` | Username for the tunnel service (e.g., BrowserStack)     |\n| `apiKey`   | API key for the tunnel service (e.g., BrowserStack)      |\n| `pathname` | The path for the tunnelâ€™s REST endpoint (e.g., `wd/hub`) |\n\n**Selenium tunnel**\n\n| Property  | Value                                                                   |\n| :---      | :---                                                                    |\n| `drivers` | A list of driver names, or objects with `name` and `options` properties |\n| `verbose` | If true, show tunnel debug information                                  |\n\nSee also:\n\n* [[https://theintern.io/docs.html#Dig%20Dug/2/api/Tunnel/tunnelproperties|Tunnel]]\n* [[https://theintern.io/docs.html#Dig%20Dug/2/api/SeleniumTunnel/seleniumproperties|SeleniumTunnel]]\n* [[https://theintern.io/docs.html#Dig%20Dug/2/api/BrowserStackTunnel/browserstackproperties|BrowserStackTunnel]]\n"
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 356,
									"character": 2
								}
							],
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "TunnelProperties"
											}
										],
										"name": "Partial"
									},
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "BrowserStackProperties"
											}
										],
										"name": "Partial"
									},
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "SeleniumProperties"
											}
										],
										"name": "Partial"
									}
								]
							}
						},
						{
							"id": 1073,
							"name": "warnOnUncaughtException",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "By default, an Intern session will fail if the Executor catches a\nbrowser-level unhandled error. This setting allows unhandled errors to be\ntreated as warnings instead of failing errors. If this setting is true or\nset to a RegExp that matches an unhandled error, Intern will emit a warning\nrather than failing the test run."
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 374,
									"character": 2
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "reference",
										"name": "RegExp"
									}
								]
							}
						},
						{
							"id": 1072,
							"name": "warnOnUnhandledRejection",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "By default, an Intern session will fail if the Executor catches a\nbrowser-level unhandled Promise rejection. This setting allows unhandled\nrejections to be treated as warnings instead of failing errors. If this\nsetting is true or set to a RegExp that matches the reason for an unhandled\nrejection, Intern will emit a warning rather than failing the test run."
							},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 365,
									"character": 2
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "reference",
										"name": "RegExp"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1019,
								1021,
								1020,
								1022,
								1023,
								1024,
								1036,
								1042,
								1043,
								1025,
								1026,
								1027,
								1028,
								1044,
								1045,
								1029,
								1046,
								1047,
								1048,
								1049,
								1030,
								1055,
								1056,
								1031,
								1060,
								1074,
								1061,
								1032,
								1033,
								1076,
								1062,
								1063,
								1075,
								1079,
								1080,
								1064,
								1081,
								1065,
								1066,
								1067,
								1034,
								1035,
								1068,
								1069,
								1077,
								1078,
								1070,
								1071,
								1073,
								1072
							]
						}
					],
					"sources": [
						{
							"fileName": "src/lib/common/config.ts",
							"line": 13,
							"character": 17
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "ResourceConfig"
						}
					]
				},
				{
					"id": 1082,
					"name": "EnvironmentSpec",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 1083,
							"name": "browserName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/common/config.ts",
									"line": 521,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1083
							]
						}
					],
					"sources": [
						{
							"fileName": "src/lib/common/config.ts",
							"line": 520,
							"character": 17
						}
					],
					"indexSignature": {
						"id": 1084,
						"name": "__index",
						"kind": 8192,
						"kindString": "Index signature",
						"flags": {},
						"parameters": [
							{
								"id": 1085,
								"name": "key",
								"kind": 32768,
								"flags": {},
								"type": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						],
						"type": {
							"type": "intrinsic",
							"name": "any"
						}
					}
				},
				{
					"id": 731,
					"name": "NodeEvents",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 738,
							"name": "*",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "A listener can listen for this event to be notified of all events"
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 1080,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "ExecutorEvent"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1087,
								"name": "Events.*"
							}
						},
						{
							"id": 739,
							"name": "afterRun",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Emitted after the local executor has finished running suites. This is\nfunctionally the same as runEnd."
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 1086,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1088,
								"name": "Events.afterRun"
							}
						},
						{
							"id": 740,
							"name": "beforeRun",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Emitted before the local executor loads suites"
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 1089,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1089,
								"name": "Events.beforeRun"
							}
						},
						{
							"id": 741,
							"name": "coverage",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Coverage info has been gathered"
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 1092,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "CoverageMessage"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1090,
								"name": "Events.coverage"
							}
						},
						{
							"id": 742,
							"name": "deprecated",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "A deprecated method was called"
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 1095,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "DeprecationMessage"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1091,
								"name": "Events.deprecated"
							}
						},
						{
							"id": 743,
							"name": "error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "An unhandled error occurs"
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 1098,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "Error"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1092,
								"name": "Events.error"
							}
						},
						{
							"id": 744,
							"name": "log",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "A debug log event"
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 1101,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1093,
								"name": "Events.log"
							}
						},
						{
							"id": 745,
							"name": "runEnd",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "All tests have finished running. This is functionally the same as\nafterRun."
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 1107,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1094,
								"name": "Events.runEnd"
							}
						},
						{
							"id": 746,
							"name": "runStart",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Emitted just before tests start running"
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 1110,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1095,
								"name": "Events.runStart"
							}
						},
						{
							"id": 732,
							"name": "serverEnd",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "A test server has stopped"
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 1056,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "default"
							}
						},
						{
							"id": 733,
							"name": "serverStart",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "A test server was started"
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 1059,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "default"
							}
						},
						{
							"id": 747,
							"name": "suiteAdd",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "A new suite has been added"
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 1113,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "default"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1096,
								"name": "Events.suiteAdd"
							}
						},
						{
							"id": 748,
							"name": "suiteEnd",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "A suite has fininshed running"
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 1116,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "default"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1097,
								"name": "Events.suiteEnd"
							}
						},
						{
							"id": 749,
							"name": "suiteStart",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "A suite has started running"
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 1119,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "default"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1098,
								"name": "Events.suiteStart"
							}
						},
						{
							"id": 750,
							"name": "testAdd",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "A new test has been added"
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 1122,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "default"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1099,
								"name": "Events.testAdd"
							}
						},
						{
							"id": 751,
							"name": "testEnd",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "A test has finished"
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 1125,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "default"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1100,
								"name": "Events.testEnd"
							}
						},
						{
							"id": 752,
							"name": "testStart",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "A test has started"
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 1128,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "default"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1101,
								"name": "Events.testStart"
							}
						},
						{
							"id": 734,
							"name": "tunnelDownloadProgress",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Emitted as a Tunnel executable download is in process"
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 1062,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 727,
								"name": "TunnelMessage"
							}
						},
						{
							"id": 735,
							"name": "tunnelStart",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "A WebDriver tunnel has been opened"
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 1065,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 727,
								"name": "TunnelMessage"
							}
						},
						{
							"id": 736,
							"name": "tunnelStatus",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "A status update from a WebDriver tunnel"
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 1068,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 727,
								"name": "TunnelMessage"
							}
						},
						{
							"id": 737,
							"name": "tunnelStop",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "A WebDriver tunnel has been stopped"
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 1071,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 727,
								"name": "TunnelMessage"
							}
						},
						{
							"id": 753,
							"name": "warning",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "A non-fatal error occurred"
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 1131,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1102,
								"name": "Events.warning"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								738,
								739,
								740,
								741,
								742,
								743,
								744,
								745,
								746,
								732,
								733,
								747,
								748,
								749,
								750,
								751,
								752,
								734,
								735,
								736,
								737,
								753
							]
						}
					],
					"sources": [
						{
							"fileName": "src/lib/executors/Node.ts",
							"line": 1054,
							"character": 17
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 1086,
							"name": "Events"
						}
					]
				},
				{
					"id": 316,
					"name": "NodePlugins",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 318,
							"name": "reporter",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Executor.ts",
									"line": 1141,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "ReporterInitializer"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Plugins.reporter"
							}
						},
						{
							"id": 317,
							"name": "tunnel",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 1039,
									"character": 2
								}
							],
							"type": {
								"type": "query",
								"queryType": {
									"type": "reference",
									"name": "default"
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								318,
								317
							]
						}
					],
					"sources": [
						{
							"fileName": "src/lib/executors/Node.ts",
							"line": 1038,
							"character": 17
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Plugins"
						}
					]
				},
				{
					"id": 319,
					"name": "Remote",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 320,
							"name": "environmentType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 1043,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "default"
							}
						},
						{
							"id": 321,
							"name": "requestedEnvironment",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 1044,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "default"
							}
						},
						{
							"id": 329,
							"name": "context",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 17,
									"character": 8
								}
							],
							"getSignature": [
								{
									"id": 330,
									"name": "context",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "Context"
									}
								}
							]
						},
						{
							"id": 325,
							"name": "parent",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 15,
									"character": 8
								}
							],
							"getSignature": [
								{
									"id": 326,
									"name": "parent",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "P"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "reference",
												"name": "StringResult"
											}
										],
										"name": "default"
									}
								}
							]
						},
						{
							"id": 331,
							"name": "promise",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 18,
									"character": 8
								}
							],
							"getSignature": [
								{
									"id": 332,
									"name": "promise",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "CancellablePromise"
									}
								}
							]
						},
						{
							"id": 327,
							"name": "session",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 16,
									"character": 8
								}
							],
							"getSignature": [
								{
									"id": 328,
									"name": "session",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"name": "default"
									}
								}
							]
						},
						{
							"id": 493,
							"name": "acceptAlert",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 77,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 494,
									"name": "acceptAlert",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.acceptAlert"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.acceptAlert"
							}
						},
						{
							"id": 420,
							"name": "activateIme",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 47,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 421,
									"name": "activateIme",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 422,
											"name": "engine",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.activateIme"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.activateIme"
							}
						},
						{
							"id": 364,
							"name": "cancel",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 24,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 365,
									"name": "cancel",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"id": 319,
										"name": "Remote"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.cancel"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.cancel"
							}
						},
						{
							"id": 352,
							"name": "catch",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 22,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 353,
									"name": "catch",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"typeParameter": [
										{
											"id": 354,
											"name": "R",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {
												"isExternal": true
											},
											"default": {
												"type": "intrinsic",
												"name": "never"
											}
										}
									],
									"parameters": [
										{
											"id": 355,
											"name": "errback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 356,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 357,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 358,
																	"name": "reason",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "reference",
																		"name": "R"
																	},
																	{
																		"type": "reference",
																		"typeArguments": [
																			{
																				"type": "reference",
																				"name": "R"
																			}
																		],
																		"name": "PromiseLike"
																	}
																]
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.catch"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.catch"
							}
						},
						{
							"id": 469,
							"name": "clearCookies",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 67,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 470,
									"name": "clearCookies",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.clearCookies"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.clearCookies"
							}
						},
						{
							"id": 599,
							"name": "clearValue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 113,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 600,
									"name": "clearValue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.clearValue"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.clearValue"
							}
						},
						{
							"id": 588,
							"name": "click",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 108,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 589,
									"name": "click",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.click"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.click"
							}
						},
						{
							"id": 505,
							"name": "clickMouseButton",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 81,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 506,
									"name": "clickMouseButton",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 507,
											"name": "button",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.clickMouseButton"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.clickMouseButton"
							}
						},
						{
							"id": 431,
							"name": "closeCurrentWindow",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 51,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 432,
									"name": "closeCurrentWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.closeCurrentWindow"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.closeCurrentWindow"
							}
						},
						{
							"id": 418,
							"name": "deactivateIme",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 46,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 419,
									"name": "deactivateIme",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.deactivateIme"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.deactivateIme"
							}
						},
						{
							"id": 471,
							"name": "deleteCookie",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 68,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 472,
									"name": "deleteCookie",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 473,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.deleteCookie"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.deleteCookie"
							}
						},
						{
							"id": 495,
							"name": "dismissAlert",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 78,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 496,
									"name": "dismissAlert",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.dismissAlert"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.dismissAlert"
							}
						},
						{
							"id": 514,
							"name": "doubleClick",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 84,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 515,
									"name": "doubleClick",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.doubleClick"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.doubleClick"
							}
						},
						{
							"id": 539,
							"name": "doubleTap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 91,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 540,
									"name": "doubleTap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 541,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "default"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.doubleTap"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.doubleTap"
							}
						},
						{
							"id": 336,
							"name": "end",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 20,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 337,
									"name": "end",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 338,
											"name": "numCommandsToPop",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.end"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.end"
							}
						},
						{
							"id": 616,
							"name": "equals",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 119,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 617,
									"name": "equals",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 618,
											"name": "other",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"name": "default"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.equals"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.equals"
							}
						},
						{
							"id": 400,
							"name": "execute",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 40,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 401,
									"name": "execute",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"typeParameter": [
										{
											"id": 402,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {
												"isExternal": true
											},
											"default": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"parameters": [
										{
											"id": 403,
											"name": "script",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"name": "Function"
													}
												]
											}
										},
										{
											"id": 404,
											"name": "args",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "T"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.execute"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.execute"
							}
						},
						{
							"id": 405,
							"name": "executeAsync",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 41,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 406,
									"name": "executeAsync",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"typeParameter": [
										{
											"id": 407,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {
												"isExternal": true
											},
											"default": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"parameters": [
										{
											"id": 408,
											"name": "script",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"name": "Function"
													}
												]
											}
										},
										{
											"id": 409,
											"name": "args",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "T"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.executeAsync"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.executeAsync"
							}
						},
						{
							"id": 359,
							"name": "finally",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 23,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 360,
									"name": "finally",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 361,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 362,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 363,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 319,
										"name": "Remote"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.finally"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.finally"
							}
						},
						{
							"id": 366,
							"name": "find",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 25,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 367,
									"name": "find",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 368,
											"name": "strategy",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": "name"
													},
													{
														"type": "literal",
														"value": "class name"
													},
													{
														"type": "literal",
														"value": "id"
													},
													{
														"type": "literal",
														"value": "partial link text"
													},
													{
														"type": "literal",
														"value": "tag name"
													},
													{
														"type": "literal",
														"value": "css selector"
													},
													{
														"type": "literal",
														"value": "link text"
													},
													{
														"type": "literal",
														"value": "xpath"
													}
												]
											}
										},
										{
											"id": 369,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "default"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.find"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.find"
							}
						},
						{
							"id": 370,
							"name": "findAll",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 26,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 371,
									"name": "findAll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 372,
											"name": "strategy",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": "name"
													},
													{
														"type": "literal",
														"value": "class name"
													},
													{
														"type": "literal",
														"value": "id"
													},
													{
														"type": "literal",
														"value": "partial link text"
													},
													{
														"type": "literal",
														"value": "tag name"
													},
													{
														"type": "literal",
														"value": "css selector"
													},
													{
														"type": "literal",
														"value": "link text"
													},
													{
														"type": "literal",
														"value": "xpath"
													}
												]
											}
										},
										{
											"id": 373,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "default"
												}
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.findAll"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.findAll"
							}
						},
						{
							"id": 658,
							"name": "findAllByClassName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/lib/Locator.d.ts",
									"line": 14,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 659,
									"name": "findAllByClassName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 660,
											"name": "className",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "default"
												}
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.findAllByClassName"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.findAllByClassName"
							}
						},
						{
							"id": 661,
							"name": "findAllByCssSelector",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/lib/Locator.d.ts",
									"line": 15,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 662,
									"name": "findAllByCssSelector",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 663,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "default"
												}
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.findAllByCssSelector"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.findAllByCssSelector"
							}
						},
						{
							"id": 667,
							"name": "findAllByLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/lib/Locator.d.ts",
									"line": 17,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 668,
									"name": "findAllByLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 669,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "default"
												}
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.findAllByLinkText"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.findAllByLinkText"
							}
						},
						{
							"id": 664,
							"name": "findAllByName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/lib/Locator.d.ts",
									"line": 16,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 665,
									"name": "findAllByName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 666,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "default"
												}
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.findAllByName"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.findAllByName"
							}
						},
						{
							"id": 670,
							"name": "findAllByPartialLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/lib/Locator.d.ts",
									"line": 18,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 671,
									"name": "findAllByPartialLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 672,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "default"
												}
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.findAllByPartialLinkText"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.findAllByPartialLinkText"
							}
						},
						{
							"id": 673,
							"name": "findAllByTagName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/lib/Locator.d.ts",
									"line": 19,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 674,
									"name": "findAllByTagName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 675,
											"name": "tagName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "default"
												}
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.findAllByTagName"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.findAllByTagName"
							}
						},
						{
							"id": 676,
							"name": "findAllByXpath",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/lib/Locator.d.ts",
									"line": 20,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 677,
									"name": "findAllByXpath",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 678,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "default"
												}
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.findAllByXpath"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.findAllByXpath"
							}
						},
						{
							"id": 634,
							"name": "findByClassName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/lib/Locator.d.ts",
									"line": 6,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 635,
									"name": "findByClassName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 636,
											"name": "className",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "default"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.findByClassName"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.findByClassName"
							}
						},
						{
							"id": 637,
							"name": "findByCssSelector",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/lib/Locator.d.ts",
									"line": 7,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 638,
									"name": "findByCssSelector",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 639,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "default"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.findByCssSelector"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.findByCssSelector"
							}
						},
						{
							"id": 640,
							"name": "findById",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/lib/Locator.d.ts",
									"line": 8,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 641,
									"name": "findById",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 642,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "default"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.findById"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.findById"
							}
						},
						{
							"id": 646,
							"name": "findByLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/lib/Locator.d.ts",
									"line": 10,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 647,
									"name": "findByLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 648,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "default"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.findByLinkText"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.findByLinkText"
							}
						},
						{
							"id": 643,
							"name": "findByName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/lib/Locator.d.ts",
									"line": 9,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 644,
									"name": "findByName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 645,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "default"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.findByName"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.findByName"
							}
						},
						{
							"id": 649,
							"name": "findByPartialLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/lib/Locator.d.ts",
									"line": 11,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 650,
									"name": "findByPartialLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 651,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "default"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.findByPartialLinkText"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.findByPartialLinkText"
							}
						},
						{
							"id": 652,
							"name": "findByTagName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/lib/Locator.d.ts",
									"line": 12,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 653,
									"name": "findByTagName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 654,
											"name": "tagName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "default"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.findByTagName"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.findByTagName"
							}
						},
						{
							"id": 655,
							"name": "findByXpath",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/lib/Locator.d.ts",
									"line": 13,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 656,
									"name": "findByXpath",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 657,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "default"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.findByXpath"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.findByXpath"
							}
						},
						{
							"id": 374,
							"name": "findDisplayed",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 27,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 375,
									"name": "findDisplayed",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 376,
											"name": "strategy",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": "name"
													},
													{
														"type": "literal",
														"value": "class name"
													},
													{
														"type": "literal",
														"value": "id"
													},
													{
														"type": "literal",
														"value": "partial link text"
													},
													{
														"type": "literal",
														"value": "tag name"
													},
													{
														"type": "literal",
														"value": "css selector"
													},
													{
														"type": "literal",
														"value": "link text"
													},
													{
														"type": "literal",
														"value": "xpath"
													}
												]
											}
										},
										{
											"id": 377,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "default"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.findDisplayed"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.findDisplayed"
							}
						},
						{
							"id": 679,
							"name": "findDisplayedByClassName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/lib/Locator.d.ts",
									"line": 21,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 680,
									"name": "findDisplayedByClassName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 681,
											"name": "className",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "default"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.findDisplayedByClassName"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.findDisplayedByClassName"
							}
						},
						{
							"id": 682,
							"name": "findDisplayedByCssSelector",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/lib/Locator.d.ts",
									"line": 22,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 683,
									"name": "findDisplayedByCssSelector",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 684,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "default"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.findDisplayedByCssSelector"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.findDisplayedByCssSelector"
							}
						},
						{
							"id": 685,
							"name": "findDisplayedById",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/lib/Locator.d.ts",
									"line": 23,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 686,
									"name": "findDisplayedById",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 687,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "default"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.findDisplayedById"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.findDisplayedById"
							}
						},
						{
							"id": 691,
							"name": "findDisplayedByLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/lib/Locator.d.ts",
									"line": 25,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 692,
									"name": "findDisplayedByLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 693,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "default"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.findDisplayedByLinkText"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.findDisplayedByLinkText"
							}
						},
						{
							"id": 688,
							"name": "findDisplayedByName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/lib/Locator.d.ts",
									"line": 24,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 689,
									"name": "findDisplayedByName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 690,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "default"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.findDisplayedByName"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.findDisplayedByName"
							}
						},
						{
							"id": 694,
							"name": "findDisplayedByPartialLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/lib/Locator.d.ts",
									"line": 26,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 695,
									"name": "findDisplayedByPartialLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 696,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "default"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.findDisplayedByPartialLinkText"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.findDisplayedByPartialLinkText"
							}
						},
						{
							"id": 697,
							"name": "findDisplayedByTagName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/lib/Locator.d.ts",
									"line": 27,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 698,
									"name": "findDisplayedByTagName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 699,
											"name": "tagName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "default"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.findDisplayedByTagName"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.findDisplayedByTagName"
							}
						},
						{
							"id": 700,
							"name": "findDisplayedByXpath",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/lib/Locator.d.ts",
									"line": 28,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 701,
									"name": "findDisplayedByXpath",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 702,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "default"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.findDisplayedByXpath"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.findDisplayedByXpath"
							}
						},
						{
							"id": 545,
							"name": "flickFinger",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 93,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 546,
									"name": "flickFinger",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 547,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"name": "default"
											}
										},
										{
											"id": 548,
											"name": "xOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 549,
											"name": "yOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 550,
											"name": "speed",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.flickFinger"
									}
								},
								{
									"id": 551,
									"name": "flickFinger",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 552,
											"name": "xOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 553,
											"name": "yOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 554,
											"name": "speed",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.flickFinger"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.flickFinger"
							}
						},
						{
							"id": 391,
							"name": "get",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 36,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 392,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 393,
											"name": "url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.get"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.get"
							}
						},
						{
							"id": 478,
							"name": "getActiveElement",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 71,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 479,
									"name": "getActiveElement",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "default"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getActiveElement"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getActiveElement"
							}
						},
						{
							"id": 414,
							"name": "getActiveImeEngine",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 44,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 415,
									"name": "getActiveImeEngine",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getActiveImeEngine"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getActiveImeEngine"
							}
						},
						{
							"id": 488,
							"name": "getAlertText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 75,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 489,
									"name": "getAlertText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getAlertText"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getAlertText"
							}
						},
						{
							"id": 387,
							"name": "getAllWindowHandles",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 34,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 388,
									"name": "getAllWindowHandles",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getAllWindowHandles"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getAllWindowHandles"
							}
						},
						{
							"id": 565,
							"name": "getApplicationCacheStatus",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 99,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 566,
									"name": "getApplicationCacheStatus",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getApplicationCacheStatus"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getApplicationCacheStatus"
							}
						},
						{
							"id": 608,
							"name": "getAttribute",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 117,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 609,
									"name": "getAttribute",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"typeParameter": [
										{
											"id": 610,
											"name": "S",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {
												"isExternal": true
											},
											"default": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"parameters": [
										{
											"id": 611,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "S"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getAttribute"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getAttribute"
							}
						},
						{
							"id": 412,
							"name": "getAvailableImeEngines",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 43,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 413,
									"name": "getAvailableImeEngines",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getAvailableImeEngines"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getAvailableImeEngines"
							}
						},
						{
							"id": 563,
							"name": "getAvailableLogTypes",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 98,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 564,
									"name": "getAvailableLogTypes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getAvailableLogTypes"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getAvailableLogTypes"
							}
						},
						{
							"id": 631,
							"name": "getComputedStyle",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 129,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 632,
									"name": "getComputedStyle",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 633,
											"name": "propertyName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getComputedStyle"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getComputedStyle"
							}
						},
						{
							"id": 464,
							"name": "getCookies",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 65,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 465,
									"name": "getCookies",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "WebDriverCookie"
												}
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getCookies"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getCookies"
							}
						},
						{
							"id": 389,
							"name": "getCurrentUrl",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 35,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 390,
									"name": "getCurrentUrl",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getCurrentUrl"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getCurrentUrl"
							}
						},
						{
							"id": 385,
							"name": "getCurrentWindowHandle",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 33,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 386,
									"name": "getCurrentWindowHandle",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getCurrentWindowHandle"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getCurrentWindowHandle"
							}
						},
						{
							"id": 573,
							"name": "getExecuteAsyncTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 102,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 574,
									"name": "getExecuteAsyncTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getExecuteAsyncTimeout"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getExecuteAsyncTimeout"
							}
						},
						{
							"id": 578,
							"name": "getFindTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 104,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 579,
									"name": "getFindTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getFindTimeout"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getFindTimeout"
							}
						},
						{
							"id": 555,
							"name": "getGeolocation",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 95,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 556,
									"name": "getGeolocation",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Geolocation"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getGeolocation"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getGeolocation"
							}
						},
						{
							"id": 560,
							"name": "getLogsFor",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 97,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 561,
									"name": "getLogsFor",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 562,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "LogEntry"
												}
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getLogsFor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getLogsFor"
							}
						},
						{
							"id": 483,
							"name": "getOrientation",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 73,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 484,
									"name": "getOrientation",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": "portrait"
													},
													{
														"type": "literal",
														"value": "landscape"
													}
												]
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getOrientation"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getOrientation"
							}
						},
						{
							"id": 583,
							"name": "getPageLoadTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 106,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 584,
									"name": "getPageLoadTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getPageLoadTimeout"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getPageLoadTimeout"
							}
						},
						{
							"id": 474,
							"name": "getPageSource",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 69,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 475,
									"name": "getPageSource",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getPageSource"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getPageSource"
							}
						},
						{
							"id": 476,
							"name": "getPageTitle",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 70,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 477,
									"name": "getPageTitle",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getPageTitle"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getPageTitle"
							}
						},
						{
							"id": 621,
							"name": "getPosition",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 121,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 622,
									"name": "getPosition",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 623,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"children": [
														{
															"id": 624,
															"name": "x",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
																	"line": 122,
																	"character": 8
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 625,
															"name": "y",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
																	"line": 123,
																	"character": 8
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																624,
																625
															]
														}
													]
												}
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getPosition"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getPosition"
							}
						},
						{
							"id": 612,
							"name": "getProperty",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 118,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 613,
									"name": "getProperty",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"typeParameter": [
										{
											"id": 614,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {
												"isExternal": true
											},
											"default": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"parameters": [
										{
											"id": 615,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "T"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getProperty"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getProperty"
							}
						},
						{
							"id": 626,
							"name": "getSize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 125,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 627,
									"name": "getSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 628,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"children": [
														{
															"id": 630,
															"name": "height",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
																	"line": 127,
																	"character": 8
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 629,
															"name": "width",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
																	"line": 126,
																	"character": 8
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																630,
																629
															]
														}
													]
												}
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getSize"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getSize"
							}
						},
						{
							"id": 605,
							"name": "getSpecAttribute",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 116,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 606,
									"name": "getSpecAttribute",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 607,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getSpecAttribute"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getSpecAttribute"
							}
						},
						{
							"id": 597,
							"name": "getTagName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 112,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 598,
									"name": "getTagName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getTagName"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getTagName"
							}
						},
						{
							"id": 378,
							"name": "getTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 31,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 379,
									"name": "getTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 380,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getTimeout"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getTimeout"
							}
						},
						{
							"id": 592,
							"name": "getVisibleText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 110,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 593,
									"name": "getVisibleText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getVisibleText"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getVisibleText"
							}
						},
						{
							"id": 455,
							"name": "getWindowPosition",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 60,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 456,
									"name": "getWindowPosition",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 457,
											"name": "windowHandle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 458,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"children": [
														{
															"id": 459,
															"name": "x",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
																	"line": 61,
																	"character": 8
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 460,
															"name": "y",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
																	"line": 62,
																	"character": 8
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																459,
																460
															]
														}
													]
												}
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getWindowPosition"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getWindowPosition"
							}
						},
						{
							"id": 441,
							"name": "getWindowSize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 54,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 442,
									"name": "getWindowSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 443,
											"name": "_windowHandle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 444,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"children": [
														{
															"id": 446,
															"name": "height",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
																	"line": 56,
																	"character": 8
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 445,
															"name": "width",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
																	"line": 55,
																	"character": 8
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																446,
																445
															]
														}
													]
												}
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.getWindowSize"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.getWindowSize"
							}
						},
						{
							"id": 396,
							"name": "goBack",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 38,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 397,
									"name": "goBack",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.goBack"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.goBack"
							}
						},
						{
							"id": 394,
							"name": "goForward",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 37,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 395,
									"name": "goForward",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.goForward"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.goForward"
							}
						},
						{
							"id": 619,
							"name": "isDisplayed",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 120,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 620,
									"name": "isDisplayed",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.isDisplayed"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.isDisplayed"
							}
						},
						{
							"id": 603,
							"name": "isEnabled",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 115,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 604,
									"name": "isEnabled",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.isEnabled"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.isEnabled"
							}
						},
						{
							"id": 416,
							"name": "isImeActivated",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 45,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 417,
									"name": "isImeActivated",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.isImeActivated"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.isImeActivated"
							}
						},
						{
							"id": 601,
							"name": "isSelected",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 114,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 602,
									"name": "isSelected",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.isSelected"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.isSelected"
							}
						},
						{
							"id": 542,
							"name": "longTap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 92,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 543,
									"name": "longTap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 544,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "default"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.longTap"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.longTap"
							}
						},
						{
							"id": 461,
							"name": "maximizeWindow",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 64,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 462,
									"name": "maximizeWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 463,
											"name": "windowHandle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.maximizeWindow"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.maximizeWindow"
							}
						},
						{
							"id": 527,
							"name": "moveFinger",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 88,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 528,
									"name": "moveFinger",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 529,
											"name": "x",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 530,
											"name": "y",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.moveFinger"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.moveFinger"
							}
						},
						{
							"id": 497,
							"name": "moveMouseTo",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 79,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 498,
									"name": "moveMouseTo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 499,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "default"
											}
										},
										{
											"id": 500,
											"name": "xOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 501,
											"name": "yOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.moveMouseTo"
									}
								},
								{
									"id": 502,
									"name": "moveMouseTo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 503,
											"name": "xOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 504,
											"name": "yOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.moveMouseTo"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.moveMouseTo"
							}
						},
						{
							"id": 519,
							"name": "pressFinger",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 86,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 520,
									"name": "pressFinger",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 521,
											"name": "x",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 522,
											"name": "y",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.pressFinger"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.pressFinger"
							}
						},
						{
							"id": 480,
							"name": "pressKeys",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 72,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 481,
									"name": "pressKeys",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 482,
											"name": "keys",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.pressKeys"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.pressKeys"
							}
						},
						{
							"id": 508,
							"name": "pressMouseButton",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 82,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 509,
									"name": "pressMouseButton",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 510,
											"name": "button",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.pressMouseButton"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.pressMouseButton"
							}
						},
						{
							"id": 567,
							"name": "quit",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 100,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 568,
									"name": "quit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.quit"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.quit"
							}
						},
						{
							"id": 398,
							"name": "refresh",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 39,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 399,
									"name": "refresh",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.refresh"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.refresh"
							}
						},
						{
							"id": 523,
							"name": "releaseFinger",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 87,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 524,
									"name": "releaseFinger",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 525,
											"name": "x",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 526,
											"name": "y",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.releaseFinger"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.releaseFinger"
							}
						},
						{
							"id": 511,
							"name": "releaseMouseButton",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 83,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 512,
									"name": "releaseMouseButton",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 513,
											"name": "button",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.releaseMouseButton"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.releaseMouseButton"
							}
						},
						{
							"id": 466,
							"name": "setCookie",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 66,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 467,
									"name": "setCookie",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 468,
											"name": "cookie",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"name": "WebDriverCookie"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.setCookie"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.setCookie"
							}
						},
						{
							"id": 575,
							"name": "setExecuteAsyncTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 103,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 576,
									"name": "setExecuteAsyncTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 577,
											"name": "ms",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.setExecuteAsyncTimeout"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.setExecuteAsyncTimeout"
							}
						},
						{
							"id": 580,
							"name": "setFindTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 105,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 581,
									"name": "setFindTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 582,
											"name": "ms",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.setFindTimeout"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.setFindTimeout"
							}
						},
						{
							"id": 557,
							"name": "setGeolocation",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 96,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 558,
									"name": "setGeolocation",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 559,
											"name": "location",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"name": "Geolocation"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.setGeolocation"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.setGeolocation"
							}
						},
						{
							"id": 322,
							"name": "setHeartbeatInterval",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 323,
									"name": "setHeartbeatInterval",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 324,
											"name": "delay",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									}
								}
							]
						},
						{
							"id": 485,
							"name": "setOrientation",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 74,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 486,
									"name": "setOrientation",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 487,
											"name": "orientation",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": "portrait"
													},
													{
														"type": "literal",
														"value": "landscape"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.setOrientation"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.setOrientation"
							}
						},
						{
							"id": 585,
							"name": "setPageLoadTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 107,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 586,
									"name": "setPageLoadTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 587,
											"name": "ms",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.setPageLoadTimeout"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.setPageLoadTimeout"
							}
						},
						{
							"id": 381,
							"name": "setTimeout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 32,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 382,
									"name": "setTimeout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 383,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 384,
											"name": "ms",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.setTimeout"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.setTimeout"
							}
						},
						{
							"id": 447,
							"name": "setWindowPosition",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 58,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 448,
									"name": "setWindowPosition",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 449,
											"name": "x",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 450,
											"name": "y",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.setWindowPosition"
									}
								},
								{
									"id": 451,
									"name": "setWindowPosition",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 452,
											"name": "windowHandle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 453,
											"name": "x",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 454,
											"name": "y",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.setWindowPosition"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.setWindowPosition"
							}
						},
						{
							"id": 433,
							"name": "setWindowSize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 52,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 434,
									"name": "setWindowSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 435,
											"name": "width",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 436,
											"name": "height",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.setWindowSize"
									}
								},
								{
									"id": 437,
									"name": "setWindowSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 438,
											"name": "windowHandle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 439,
											"name": "width",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 440,
											"name": "height",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.setWindowSize"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.setWindowSize"
							}
						},
						{
							"id": 333,
							"name": "sleep",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 19,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 334,
									"name": "sleep",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 335,
											"name": "ms",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.sleep"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.sleep"
							}
						},
						{
							"id": 590,
							"name": "submit",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 109,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 591,
									"name": "submit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.submit"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.submit"
							}
						},
						{
							"id": 423,
							"name": "switchToFrame",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 48,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 424,
									"name": "switchToFrame",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 425,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "reference",
														"name": "default"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.switchToFrame"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.switchToFrame"
							}
						},
						{
							"id": 429,
							"name": "switchToParentFrame",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 50,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 430,
									"name": "switchToParentFrame",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.switchToParentFrame"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.switchToParentFrame"
							}
						},
						{
							"id": 426,
							"name": "switchToWindow",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 49,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 427,
									"name": "switchToWindow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 428,
											"name": "handle",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.switchToWindow"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.switchToWindow"
							}
						},
						{
							"id": 410,
							"name": "takeScreenshot",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 42,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 411,
									"name": "takeScreenshot",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Buffer"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.takeScreenshot"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.takeScreenshot"
							}
						},
						{
							"id": 516,
							"name": "tap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 85,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 517,
									"name": "tap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 518,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"name": "default"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.tap"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.tap"
							}
						},
						{
							"id": 339,
							"name": "then",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 21,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 340,
									"name": "then",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"typeParameter": [
										{
											"id": 341,
											"name": "U",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {
												"isExternal": true
											},
											"default": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 342,
											"name": "R",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {
												"isExternal": true
											},
											"default": {
												"type": "intrinsic",
												"name": "never"
											}
										}
									],
									"parameters": [
										{
											"id": 343,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 344,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {
																"isExternal": true
															},
															"signatures": [
																{
																	"id": 345,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {
																		"isExternal": true
																	},
																	"parameters": [
																		{
																			"id": 346,
																			"name": "value",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {
																				"isExternal": true
																			},
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		},
																		{
																			"id": 347,
																			"name": "setContext",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {
																				"isExternal": true
																			},
																			"type": {
																				"type": "reference",
																				"name": "SetContextMethod"
																			}
																		}
																	],
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "reference",
																				"name": "U"
																			},
																			{
																				"type": "reference",
																				"typeArguments": [
																					{
																						"type": "reference",
																						"name": "U"
																					}
																				],
																				"name": "PromiseLike"
																			}
																		]
																	}
																}
															]
														}
													}
												]
											}
										},
										{
											"id": 348,
											"name": "errback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 349,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {
																"isExternal": true
															},
															"signatures": [
																{
																	"id": 350,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {
																		"isExternal": true
																	},
																	"parameters": [
																		{
																			"id": 351,
																			"name": "error",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {
																				"isExternal": true
																			},
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		}
																	],
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "reference",
																				"name": "R"
																			},
																			{
																				"type": "reference",
																				"typeArguments": [
																					{
																						"type": "reference",
																						"name": "R"
																					}
																				],
																				"name": "PromiseLike"
																			}
																		]
																	}
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "U"
													},
													{
														"type": "reference",
														"name": "R"
													}
												]
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.then"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.then"
							}
						},
						{
							"id": 531,
							"name": "touchScroll",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 89,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 532,
									"name": "touchScroll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 533,
											"name": "xOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 534,
											"name": "yOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.touchScroll"
									}
								},
								{
									"id": 535,
									"name": "touchScroll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 536,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "default"
											}
										},
										{
											"id": 537,
											"name": "xOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 538,
											"name": "yOffset",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.touchScroll"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.touchScroll"
							}
						},
						{
							"id": 594,
							"name": "type",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 111,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 595,
									"name": "type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 596,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.type"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.type"
							}
						},
						{
							"id": 490,
							"name": "typeInPrompt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 76,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 491,
									"name": "typeInPrompt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 492,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.typeInPrompt"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.typeInPrompt"
							}
						},
						{
							"id": 569,
							"name": "waitForDeleted",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/Command.d.ts",
									"line": 101,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 570,
									"name": "waitForDeleted",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 571,
											"name": "using",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": "name"
													},
													{
														"type": "literal",
														"value": "class name"
													},
													{
														"type": "literal",
														"value": "id"
													},
													{
														"type": "literal",
														"value": "partial link text"
													},
													{
														"type": "literal",
														"value": "tag name"
													},
													{
														"type": "literal",
														"value": "css selector"
													},
													{
														"type": "literal",
														"value": "link text"
													},
													{
														"type": "literal",
														"value": "xpath"
													}
												]
											}
										},
										{
											"id": 572,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.waitForDeleted"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.waitForDeleted"
							}
						},
						{
							"id": 703,
							"name": "waitForDeletedByClassName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/lib/Locator.d.ts",
									"line": 29,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 704,
									"name": "waitForDeletedByClassName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 705,
											"name": "className",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.waitForDeletedByClassName"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.waitForDeletedByClassName"
							}
						},
						{
							"id": 706,
							"name": "waitForDeletedByCssSelector",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/lib/Locator.d.ts",
									"line": 30,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 707,
									"name": "waitForDeletedByCssSelector",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 708,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.waitForDeletedByCssSelector"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.waitForDeletedByCssSelector"
							}
						},
						{
							"id": 709,
							"name": "waitForDeletedById",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/lib/Locator.d.ts",
									"line": 31,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 710,
									"name": "waitForDeletedById",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 711,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.waitForDeletedById"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.waitForDeletedById"
							}
						},
						{
							"id": 715,
							"name": "waitForDeletedByLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/lib/Locator.d.ts",
									"line": 33,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 716,
									"name": "waitForDeletedByLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 717,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.waitForDeletedByLinkText"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.waitForDeletedByLinkText"
							}
						},
						{
							"id": 712,
							"name": "waitForDeletedByName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/lib/Locator.d.ts",
									"line": 32,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 713,
									"name": "waitForDeletedByName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 714,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.waitForDeletedByName"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.waitForDeletedByName"
							}
						},
						{
							"id": 718,
							"name": "waitForDeletedByPartialLinkText",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/lib/Locator.d.ts",
									"line": 34,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 719,
									"name": "waitForDeletedByPartialLinkText",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 720,
											"name": "text",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.waitForDeletedByPartialLinkText"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.waitForDeletedByPartialLinkText"
							}
						},
						{
							"id": 721,
							"name": "waitForDeletedByTagName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/lib/Locator.d.ts",
									"line": 35,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 722,
									"name": "waitForDeletedByTagName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 723,
											"name": "tagName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.waitForDeletedByTagName"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.waitForDeletedByTagName"
							}
						},
						{
							"id": 724,
							"name": "waitForDeletedByXpath",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@theintern/leadfoot/lib/Locator.d.ts",
									"line": 36,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 725,
									"name": "waitForDeletedByXpath",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 726,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "default"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Command.waitForDeletedByXpath"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Command.waitForDeletedByXpath"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								320,
								321
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								329,
								325,
								331,
								327
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								493,
								420,
								364,
								352,
								469,
								599,
								588,
								505,
								431,
								418,
								471,
								495,
								514,
								539,
								336,
								616,
								400,
								405,
								359,
								366,
								370,
								658,
								661,
								667,
								664,
								670,
								673,
								676,
								634,
								637,
								640,
								646,
								643,
								649,
								652,
								655,
								374,
								679,
								682,
								685,
								691,
								688,
								694,
								697,
								700,
								545,
								391,
								478,
								414,
								488,
								387,
								565,
								608,
								412,
								563,
								631,
								464,
								389,
								385,
								573,
								578,
								555,
								560,
								483,
								583,
								474,
								476,
								621,
								612,
								626,
								605,
								597,
								378,
								592,
								455,
								441,
								396,
								394,
								619,
								603,
								416,
								601,
								542,
								461,
								527,
								497,
								519,
								480,
								508,
								567,
								398,
								523,
								511,
								466,
								575,
								580,
								557,
								322,
								485,
								585,
								381,
								447,
								433,
								333,
								590,
								423,
								429,
								426,
								410,
								516,
								339,
								531,
								594,
								490,
								569,
								703,
								706,
								709,
								715,
								712,
								718,
								721,
								724
							]
						}
					],
					"sources": [
						{
							"fileName": "src/lib/executors/Node.ts",
							"line": 1042,
							"character": 17
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"typeArguments": [
								{
									"type": "intrinsic",
									"name": "any"
								}
							],
							"name": "Command"
						}
					]
				},
				{
					"id": 727,
					"name": "TunnelMessage",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 729,
							"name": "progress",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 1050,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "DownloadProgressEvent"
							}
						},
						{
							"id": 730,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 1051,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 728,
							"name": "tunnel",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/lib/executors/Node.ts",
									"line": 1049,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"name": "default"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								729,
								730,
								728
							]
						}
					],
					"sources": [
						{
							"fileName": "src/lib/executors/Node.ts",
							"line": 1048,
							"character": 17
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						4
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1018,
						1082,
						731,
						316,
						319,
						727
					]
				}
			],
			"sources": [
				{
					"fileName": "src/lib/executors/Node.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "Modules",
			"kind": 1,
			"children": [
				1,
				754,
				3
			]
		}
	]
}